
N64_joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000010bc  00001150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800132  00800132  00001182  2**0
                  ALLOC
  3 .stab         00000780  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e1  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000019e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000007d  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  00001a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f1  00000000  00000000  00001a99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	68 c0       	rjmp	.+208    	; 0xd2 <__ctors_end>
       2:	97 c6       	rjmp	.+3374   	; 0xd32 <__vector_1>
       4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
       6:	80 c0       	rjmp	.+256    	; 0x108 <__bad_interrupt>
       8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
       a:	7e c0       	rjmp	.+252    	; 0x108 <__bad_interrupt>
       c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
       e:	7c c0       	rjmp	.+248    	; 0x108 <__bad_interrupt>
      10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
      12:	7a c0       	rjmp	.+244    	; 0x108 <__bad_interrupt>
      14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
      16:	78 c0       	rjmp	.+240    	; 0x108 <__bad_interrupt>
      18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
      1a:	76 c0       	rjmp	.+236    	; 0x108 <__bad_interrupt>
      1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
      1e:	74 c0       	rjmp	.+232    	; 0x108 <__bad_interrupt>
      20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
      22:	72 c0       	rjmp	.+228    	; 0x108 <__bad_interrupt>
      24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
      26:	70 c0       	rjmp	.+224    	; 0x108 <__bad_interrupt>
      28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
      2a:	6e c0       	rjmp	.+220    	; 0x108 <__bad_interrupt>
      2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
      2e:	6c c0       	rjmp	.+216    	; 0x108 <__bad_interrupt>
      30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
      32:	6a c0       	rjmp	.+212    	; 0x108 <__bad_interrupt>

00000034 <usbDescrDevice>:
      34:	12 01 01 01 00 00 00 08 81 17 9a 0a 02 01 01 02     ................
      44:	03 01                                               ..

00000046 <usbCfgSerialNumberStringDescriptor>:
      46:	0a 03 31 00 30 00 30 00 30 00                       ..1.0.0.0.

00000050 <gcn64_usbHidReportDescriptor>:
      50:	05 01 09 05 a1 01 09 01 a1 00 05 01 09 30 09 31     .............0.1
      60:	15 00 26 ff 00 75 08 95 02 81 02 c0 05 09 19 01     ..&..u..........
      70:	29 10 15 00 25 01 75 01 95 10 81 02 c0              )...%.u......

0000007d <usbDescrConfig>:
      7d:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
      8d:	00 00 09 21 01 01 00 01 22 00 00 07 05 81 03 08     ...!....".......
      9d:	00 0a                                               ..

0000009f <usbDescrString0>:
      9f:	04 03 09 04                                         ....

000000a3 <usbDescrString1>:
      a3:	18 03 72 00 61 00 70 00 68 00 6e 00 65 00 74 00     ..r.a.p.h.n.e.t.
      b3:	2e 00 6e 00 65 00 74 00                             ..n.e.t.

000000bb <usbDescrString2>:
      bb:	16 03 4e 00 49 00 4e 00 5f 00 36 00 34 00 5f 00     ..N.I.N._.6.4._.
      cb:	55 00 53 00 42 00 00                                U.S.B..

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d4 e0       	ldi	r29, 0x04	; 4
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	11 e0       	ldi	r17, 0x01	; 1
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	ec eb       	ldi	r30, 0xBC	; 188
      e6:	f0 e1       	ldi	r31, 0x10	; 16
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a2 33       	cpi	r26, 0x32	; 50
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	11 e0       	ldi	r17, 0x01	; 1
      f6:	a2 e3       	ldi	r26, 0x32	; 50
      f8:	b1 e0       	ldi	r27, 0x01	; 1
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a6 39       	cpi	r26, 0x96	; 150
     100:	b1 07       	cpc	r27, r17
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	82 d2       	rcall	.+1284   	; 0x60a <main>
     106:	d8 c7       	rjmp	.+4016   	; 0x10b8 <_exit>

00000108 <__bad_interrupt>:
     108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <getUsbDescrDevice_size>:
     10a:	82 e1       	ldi	r24, 0x12	; 18
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	08 95       	ret

00000110 <gamecubeBuildReport>:
     110:	00 97       	sbiw	r24, 0x00	; 0
     112:	41 f0       	breq	.+16     	; 0x124 <gamecubeBuildReport+0x14>
     114:	dc 01       	movw	r26, r24
     116:	e3 e3       	ldi	r30, 0x33	; 51
     118:	f1 e0       	ldi	r31, 0x01	; 1
     11a:	88 e0       	ldi	r24, 0x08	; 8
     11c:	01 90       	ld	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	81 50       	subi	r24, 0x01	; 1
     122:	e1 f7       	brne	.-8      	; 0x11c <gamecubeBuildReport+0xc>
     124:	ab e3       	ldi	r26, 0x3B	; 59
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	e3 e3       	ldi	r30, 0x33	; 51
     12a:	f1 e0       	ldi	r31, 0x01	; 1
     12c:	88 e0       	ldi	r24, 0x08	; 8
     12e:	01 90       	ld	r0, Z+
     130:	0d 92       	st	X+, r0
     132:	81 50       	subi	r24, 0x01	; 1
     134:	e1 f7       	brne	.-8      	; 0x12e <gamecubeBuildReport+0x1e>
     136:	08 95       	ret

00000138 <gamecubeChanged>:
     138:	80 91 14 01 	lds	r24, 0x0114
     13c:	90 91 15 01 	lds	r25, 0x0115
     140:	00 97       	sbiw	r24, 0x00	; 0
     142:	31 f0       	breq	.+12     	; 0x150 <gamecubeChanged+0x18>
     144:	10 92 15 01 	sts	0x0115, r1
     148:	10 92 14 01 	sts	0x0114, r1
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	08 95       	ret
     150:	83 e3       	ldi	r24, 0x33	; 51
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	6b e3       	ldi	r22, 0x3B	; 59
     156:	71 e0       	ldi	r23, 0x01	; 1
     158:	48 e0       	ldi	r20, 0x08	; 8
     15a:	50 e0       	ldi	r21, 0x00	; 0
     15c:	a0 d7       	rcall	.+3904   	; 0x109e <memcmp>
     15e:	08 95       	ret

00000160 <gamecubeUpdate>:
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	df 93       	push	r29
     166:	cf 93       	push	r28
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	c9 54       	subi	r28, 0x49	; 73
     16e:	d0 40       	sbci	r29, 0x00	; 0
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	f8 94       	cli
     174:	de bf       	out	0x3e, r29	; 62
     176:	0f be       	out	0x3f, r0	; 63
     178:	cd bf       	out	0x3d, r28	; 61
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	27 d3       	rcall	.+1614   	; 0x7cc <_n64Update>
     17e:	fe 01       	movw	r30, r28
     180:	39 96       	adiw	r30, 0x09	; 9
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	ef 93       	push	r30
     186:	ff 93       	push	r31
     188:	00 e8       	ldi	r16, 0x80	; 128

0000018a <nextBit>:
     18a:	10 e4       	ldi	r17, 0x40	; 64
     18c:	10 23       	and	r17, r16
     18e:	a9 f0       	breq	.+42     	; 0x1ba <send0>
	...

00000192 <send1>:
     192:	3d 9a       	sbi	0x07, 5	; 7
	...
     1a8:	3d 98       	cbi	0x07, 5	; 7
     1aa:	38 e0       	ldi	r19, 0x08	; 8

000001ac <lp1>:
     1ac:	3a 95       	dec	r19
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <lp1>
     1b0:	00 00       	nop
     1b2:	00 00       	nop
     1b4:	06 95       	lsr	r16
     1b6:	61 f0       	breq	.+24     	; 0x1d0 <done>
     1b8:	e8 cf       	rjmp	.-48     	; 0x18a <nextBit>

000001ba <send0>:
     1ba:	3d 9a       	sbi	0x07, 5	; 7
     1bc:	3b e0       	ldi	r19, 0x0B	; 11

000001be <lp0>:
     1be:	3a 95       	dec	r19
     1c0:	f1 f7       	brne	.-4      	; 0x1be <lp0>
     1c2:	00 00       	nop
     1c4:	3d 98       	cbi	0x07, 5	; 7
     1c6:	00 00       	nop
     1c8:	00 00       	nop
     1ca:	06 95       	lsr	r16
     1cc:	09 f0       	breq	.+2      	; 0x1d0 <done>
     1ce:	dd cf       	rjmp	.-70     	; 0x18a <nextBit>

000001d0 <done>:
     1d0:	3d 98       	cbi	0x07, 5	; 7
     1d2:	00 e8       	ldi	r16, 0x80	; 128

000001d4 <nextBitA>:
     1d4:	13 e0       	ldi	r17, 0x03	; 3
     1d6:	10 23       	and	r17, r16
     1d8:	a9 f0       	breq	.+42     	; 0x204 <send0A>
     1da:	00 00       	nop
     1dc:	3d 9a       	sbi	0x07, 5	; 7
	...
     1f2:	3d 98       	cbi	0x07, 5	; 7
     1f4:	38 e0       	ldi	r19, 0x08	; 8

000001f6 <lp1A>:
     1f6:	3a 95       	dec	r19
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lp1A>
     1fa:	00 00       	nop
     1fc:	00 00       	nop
     1fe:	06 95       	lsr	r16
     200:	61 f0       	breq	.+24     	; 0x21a <doneA>
     202:	e8 cf       	rjmp	.-48     	; 0x1d4 <nextBitA>

00000204 <send0A>:
     204:	3d 9a       	sbi	0x07, 5	; 7
     206:	3b e0       	ldi	r19, 0x0B	; 11

00000208 <lp0A>:
     208:	3a 95       	dec	r19
     20a:	f1 f7       	brne	.-4      	; 0x208 <lp0A>
     20c:	00 00       	nop
     20e:	3d 98       	cbi	0x07, 5	; 7
     210:	00 00       	nop
     212:	00 00       	nop
     214:	06 95       	lsr	r16
     216:	09 f0       	breq	.+2      	; 0x21a <doneA>
     218:	dd cf       	rjmp	.-70     	; 0x1d4 <nextBitA>

0000021a <doneA>:
     21a:	3d 98       	cbi	0x07, 5	; 7
     21c:	00 e8       	ldi	r16, 0x80	; 128

0000021e <nextBitB>:
     21e:	18 2f       	mov	r17, r24
     220:	10 23       	and	r17, r16
     222:	a9 f0       	breq	.+42     	; 0x24e <send0B>
     224:	00 00       	nop
     226:	3d 9a       	sbi	0x07, 5	; 7
	...
     23c:	3d 98       	cbi	0x07, 5	; 7
     23e:	38 e0       	ldi	r19, 0x08	; 8

00000240 <lp1B>:
     240:	3a 95       	dec	r19
     242:	f1 f7       	brne	.-4      	; 0x240 <lp1B>
     244:	00 00       	nop
     246:	00 00       	nop
     248:	06 95       	lsr	r16
     24a:	61 f0       	breq	.+24     	; 0x264 <doneB>
     24c:	e8 cf       	rjmp	.-48     	; 0x21e <nextBitB>

0000024e <send0B>:
     24e:	3d 9a       	sbi	0x07, 5	; 7
     250:	3b e0       	ldi	r19, 0x0B	; 11

00000252 <lp0B>:
     252:	3a 95       	dec	r19
     254:	f1 f7       	brne	.-4      	; 0x252 <lp0B>
     256:	00 00       	nop
     258:	3d 98       	cbi	0x07, 5	; 7
     25a:	00 00       	nop
     25c:	00 00       	nop
     25e:	06 95       	lsr	r16
     260:	09 f0       	breq	.+2      	; 0x264 <doneB>
     262:	dd cf       	rjmp	.-70     	; 0x21e <nextBitB>

00000264 <doneB>:
     264:	3d 98       	cbi	0x07, 5	; 7
	...
     26e:	3d 9a       	sbi	0x07, 5	; 7
	...
     278:	3d 98       	cbi	0x07, 5	; 7

0000027a <anti_slow_rise>:
     27a:	16 b1       	in	r17, 0x06	; 6
     27c:	10 72       	andi	r17, 0x20	; 32
     27e:	e9 f3       	breq	.-6      	; 0x27a <anti_slow_rise>
     280:	30 e4       	ldi	r19, 0x40	; 64

00000282 <st>:
     282:	0f e3       	ldi	r16, 0x3F	; 63

00000284 <waitFall>:
     284:	0a 95       	dec	r16
     286:	29 f1       	breq	.+74     	; 0x2d2 <timeout>
     288:	16 b1       	in	r17, 0x06	; 6
     28a:	10 72       	andi	r17, 0x20	; 32
     28c:	d9 f7       	brne	.-10     	; 0x284 <waitFall>
     28e:	29 98       	cbi	0x05, 1	; 5
	...
     2ac:	00 00       	nop
     2ae:	26 b1       	in	r18, 0x06	; 6
     2b0:	29 9a       	sbi	0x05, 1	; 5
     2b2:	20 72       	andi	r18, 0x20	; 32
     2b4:	21 93       	st	Z+, r18
     2b6:	3a 95       	dec	r19
     2b8:	39 f0       	breq	.+14     	; 0x2c8 <ok>
     2ba:	0f e3       	ldi	r16, 0x3F	; 63

000002bc <waitHigh>:
     2bc:	0a 95       	dec	r16
     2be:	49 f0       	breq	.+18     	; 0x2d2 <timeout>
     2c0:	26 b1       	in	r18, 0x06	; 6
     2c2:	20 72       	andi	r18, 0x20	; 32
     2c4:	f1 f6       	brne	.-68     	; 0x282 <st>
     2c6:	fa cf       	rjmp	.-12     	; 0x2bc <waitHigh>

000002c8 <ok>:
     2c8:	88 27       	eor	r24, r24
     2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <end>

000002cc <error>:
     2cc:	29 9a       	sbi	0x05, 1	; 5
     2ce:	83 2f       	mov	r24, r19
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <end>

000002d2 <timeout>:
     2d2:	88 27       	eor	r24, r24
     2d4:	80 95       	com	r24

000002d6 <end>:
     2d6:	ff 91       	pop	r31
     2d8:	ef 91       	pop	r30
     2da:	29 98       	cbi	0x05, 1	; 5
     2dc:	8f 3f       	cpi	r24, 0xFF	; 255
     2de:	21 f4       	brne	.+8      	; 0x2e8 <end+0x12>
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 32 01 	sts	0x0132, r24
     2e6:	1b c1       	rjmp	.+566    	; 0x51e <__stack+0x1f>
     2e8:	9e 01       	movw	r18, r28
     2ea:	2f 5f       	subi	r18, 0xFF	; 255
     2ec:	3f 4f       	sbci	r19, 0xFF	; 255
     2ee:	88 e0       	ldi	r24, 0x08	; 8
     2f0:	d9 01       	movw	r26, r18
     2f2:	1d 92       	st	X+, r1
     2f4:	8a 95       	dec	r24
     2f6:	e9 f7       	brne	.-6      	; 0x2f2 <end+0x1c>
     2f8:	69 81       	ldd	r22, Y+1	; 0x01
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	20 e8       	ldi	r18, 0x80	; 128
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	dc 01       	movw	r26, r24
     304:	50 96       	adiw	r26, 0x10	; 16
     306:	ae 0f       	add	r26, r30
     308:	bf 1f       	adc	r27, r31
     30a:	4c 91       	ld	r20, X
     30c:	44 23       	and	r20, r20
     30e:	41 f0       	breq	.+16     	; 0x320 <end+0x4a>
     310:	a9 01       	movw	r20, r18
     312:	08 2e       	mov	r0, r24
     314:	02 c0       	rjmp	.+4      	; 0x31a <end+0x44>
     316:	55 95       	asr	r21
     318:	47 95       	ror	r20
     31a:	0a 94       	dec	r0
     31c:	e2 f7       	brpl	.-8      	; 0x316 <end+0x40>
     31e:	01 c0       	rjmp	.+2      	; 0x322 <end+0x4c>
     320:	40 e0       	ldi	r20, 0x00	; 0
     322:	64 2b       	or	r22, r20
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	88 30       	cpi	r24, 0x08	; 8
     328:	91 05       	cpc	r25, r1
     32a:	59 f7       	brne	.-42     	; 0x302 <end+0x2c>
     32c:	69 83       	std	Y+1, r22	; 0x01
     32e:	aa 81       	ldd	r26, Y+2	; 0x02
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	ae 01       	movw	r20, r28
     336:	47 5f       	subi	r20, 0xF7	; 247
     338:	5f 4f       	sbci	r21, 0xFF	; 255
     33a:	20 e8       	ldi	r18, 0x80	; 128
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	fc 01       	movw	r30, r24
     340:	78 96       	adiw	r30, 0x18	; 24
     342:	e4 0f       	add	r30, r20
     344:	f5 1f       	adc	r31, r21
     346:	60 81       	ld	r22, Z
     348:	66 23       	and	r22, r22
     34a:	41 f0       	breq	.+16     	; 0x35c <end+0x86>
     34c:	b9 01       	movw	r22, r18
     34e:	08 2e       	mov	r0, r24
     350:	02 c0       	rjmp	.+4      	; 0x356 <end+0x80>
     352:	75 95       	asr	r23
     354:	67 95       	ror	r22
     356:	0a 94       	dec	r0
     358:	e2 f7       	brpl	.-8      	; 0x352 <end+0x7c>
     35a:	01 c0       	rjmp	.+2      	; 0x35e <end+0x88>
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	a6 2b       	or	r26, r22
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	88 30       	cpi	r24, 0x08	; 8
     364:	91 05       	cpc	r25, r1
     366:	59 f7       	brne	.-42     	; 0x33e <end+0x68>
     368:	a0 95       	com	r26
     36a:	aa 83       	std	Y+2, r26	; 0x02
     36c:	ab 81       	ldd	r26, Y+3	; 0x03
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	ae 01       	movw	r20, r28
     374:	47 5f       	subi	r20, 0xF7	; 247
     376:	5f 4f       	sbci	r21, 0xFF	; 255
     378:	20 e8       	ldi	r18, 0x80	; 128
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	fc 01       	movw	r30, r24
     37e:	b0 96       	adiw	r30, 0x20	; 32
     380:	e4 0f       	add	r30, r20
     382:	f5 1f       	adc	r31, r21
     384:	60 81       	ld	r22, Z
     386:	66 23       	and	r22, r22
     388:	41 f0       	breq	.+16     	; 0x39a <end+0xc4>
     38a:	b9 01       	movw	r22, r18
     38c:	08 2e       	mov	r0, r24
     38e:	02 c0       	rjmp	.+4      	; 0x394 <end+0xbe>
     390:	75 95       	asr	r23
     392:	67 95       	ror	r22
     394:	0a 94       	dec	r0
     396:	e2 f7       	brpl	.-8      	; 0x390 <end+0xba>
     398:	01 c0       	rjmp	.+2      	; 0x39c <end+0xc6>
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	a6 2b       	or	r26, r22
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	88 30       	cpi	r24, 0x08	; 8
     3a2:	91 05       	cpc	r25, r1
     3a4:	59 f7       	brne	.-42     	; 0x37c <end+0xa6>
     3a6:	ab 83       	std	Y+3, r26	; 0x03
     3a8:	ac 81       	ldd	r26, Y+4	; 0x04
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	ae 01       	movw	r20, r28
     3b0:	47 5f       	subi	r20, 0xF7	; 247
     3b2:	5f 4f       	sbci	r21, 0xFF	; 255
     3b4:	20 e8       	ldi	r18, 0x80	; 128
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	fc 01       	movw	r30, r24
     3ba:	b8 96       	adiw	r30, 0x28	; 40
     3bc:	e4 0f       	add	r30, r20
     3be:	f5 1f       	adc	r31, r21
     3c0:	60 81       	ld	r22, Z
     3c2:	66 23       	and	r22, r22
     3c4:	41 f4       	brne	.+16     	; 0x3d6 <end+0x100>
     3c6:	b9 01       	movw	r22, r18
     3c8:	08 2e       	mov	r0, r24
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <end+0xfa>
     3cc:	75 95       	asr	r23
     3ce:	67 95       	ror	r22
     3d0:	0a 94       	dec	r0
     3d2:	e2 f7       	brpl	.-8      	; 0x3cc <end+0xf6>
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <end+0x102>
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	a6 2b       	or	r26, r22
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	88 30       	cpi	r24, 0x08	; 8
     3de:	91 05       	cpc	r25, r1
     3e0:	59 f7       	brne	.-42     	; 0x3b8 <end+0xe2>
     3e2:	ac 83       	std	Y+4, r26	; 0x04
     3e4:	ad 81       	ldd	r26, Y+5	; 0x05
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	ae 01       	movw	r20, r28
     3ec:	47 5f       	subi	r20, 0xF7	; 247
     3ee:	5f 4f       	sbci	r21, 0xFF	; 255
     3f0:	20 e8       	ldi	r18, 0x80	; 128
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	fc 01       	movw	r30, r24
     3f6:	f0 96       	adiw	r30, 0x30	; 48
     3f8:	e4 0f       	add	r30, r20
     3fa:	f5 1f       	adc	r31, r21
     3fc:	60 81       	ld	r22, Z
     3fe:	66 23       	and	r22, r22
     400:	41 f0       	breq	.+16     	; 0x412 <end+0x13c>
     402:	b9 01       	movw	r22, r18
     404:	08 2e       	mov	r0, r24
     406:	02 c0       	rjmp	.+4      	; 0x40c <end+0x136>
     408:	75 95       	asr	r23
     40a:	67 95       	ror	r22
     40c:	0a 94       	dec	r0
     40e:	e2 f7       	brpl	.-8      	; 0x408 <end+0x132>
     410:	01 c0       	rjmp	.+2      	; 0x414 <end+0x13e>
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	a6 2b       	or	r26, r22
     416:	01 96       	adiw	r24, 0x01	; 1
     418:	88 30       	cpi	r24, 0x08	; 8
     41a:	91 05       	cpc	r25, r1
     41c:	59 f7       	brne	.-42     	; 0x3f4 <end+0x11e>
     41e:	a0 95       	com	r26
     420:	ad 83       	std	Y+5, r26	; 0x05
     422:	ae 81       	ldd	r26, Y+6	; 0x06
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	ae 01       	movw	r20, r28
     42a:	47 5f       	subi	r20, 0xF7	; 247
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	20 e8       	ldi	r18, 0x80	; 128
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	fc 01       	movw	r30, r24
     434:	f8 96       	adiw	r30, 0x38	; 56
     436:	e4 0f       	add	r30, r20
     438:	f5 1f       	adc	r31, r21
     43a:	60 81       	ld	r22, Z
     43c:	66 23       	and	r22, r22
     43e:	41 f0       	breq	.+16     	; 0x450 <end+0x17a>
     440:	b9 01       	movw	r22, r18
     442:	08 2e       	mov	r0, r24
     444:	02 c0       	rjmp	.+4      	; 0x44a <end+0x174>
     446:	75 95       	asr	r23
     448:	67 95       	ror	r22
     44a:	0a 94       	dec	r0
     44c:	e2 f7       	brpl	.-8      	; 0x446 <end+0x170>
     44e:	01 c0       	rjmp	.+2      	; 0x452 <end+0x17c>
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	a6 2b       	or	r26, r22
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	88 30       	cpi	r24, 0x08	; 8
     458:	91 05       	cpc	r25, r1
     45a:	59 f7       	brne	.-42     	; 0x432 <end+0x15c>
     45c:	a0 95       	com	r26
     45e:	ae 83       	std	Y+6, r26	; 0x06
     460:	af 81       	ldd	r26, Y+7	; 0x07
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	ae 01       	movw	r20, r28
     468:	47 5f       	subi	r20, 0xF7	; 247
     46a:	5f 4f       	sbci	r21, 0xFF	; 255
     46c:	21 e0       	ldi	r18, 0x01	; 1
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	fc 01       	movw	r30, r24
     472:	33 96       	adiw	r30, 0x03	; 3
     474:	e4 0f       	add	r30, r20
     476:	f5 1f       	adc	r31, r21
     478:	60 81       	ld	r22, Z
     47a:	66 23       	and	r22, r22
     47c:	41 f0       	breq	.+16     	; 0x48e <end+0x1b8>
     47e:	b9 01       	movw	r22, r18
     480:	08 2e       	mov	r0, r24
     482:	02 c0       	rjmp	.+4      	; 0x488 <end+0x1b2>
     484:	66 0f       	add	r22, r22
     486:	77 1f       	adc	r23, r23
     488:	0a 94       	dec	r0
     48a:	e2 f7       	brpl	.-8      	; 0x484 <end+0x1ae>
     48c:	01 c0       	rjmp	.+2      	; 0x490 <end+0x1ba>
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	a6 2b       	or	r26, r22
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	85 30       	cpi	r24, 0x05	; 5
     496:	91 05       	cpc	r25, r1
     498:	59 f7       	brne	.-42     	; 0x470 <end+0x19a>
     49a:	8a 89       	ldd	r24, Y+18	; 0x12
     49c:	88 23       	and	r24, r24
     49e:	11 f0       	breq	.+4      	; 0x4a4 <end+0x1ce>
     4a0:	30 e2       	ldi	r19, 0x20	; 32
     4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <end+0x1d0>
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	3a 2b       	or	r19, r26
     4a8:	8b 89       	ldd	r24, Y+19	; 0x13
     4aa:	88 23       	and	r24, r24
     4ac:	11 f0       	breq	.+4      	; 0x4b2 <end+0x1dc>
     4ae:	80 e4       	ldi	r24, 0x40	; 64
     4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <end+0x1de>
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	38 2b       	or	r19, r24
     4b6:	8c 89       	ldd	r24, Y+20	; 0x14
     4b8:	88 23       	and	r24, r24
     4ba:	11 f0       	breq	.+4      	; 0x4c0 <end+0x1ea>
     4bc:	80 e8       	ldi	r24, 0x80	; 128
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <end+0x1ec>
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	38 2b       	or	r19, r24
     4c4:	3f 83       	std	Y+7, r19	; 0x07
     4c6:	8d 89       	ldd	r24, Y+21	; 0x15
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	88 23       	and	r24, r24
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <end+0x1fa>
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	88 85       	ldd	r24, Y+8	; 0x08
     4d2:	89 2b       	or	r24, r25
     4d4:	9e 89       	ldd	r25, Y+22	; 0x16
     4d6:	99 23       	and	r25, r25
     4d8:	11 f0       	breq	.+4      	; 0x4de <end+0x208>
     4da:	22 e0       	ldi	r18, 0x02	; 2
     4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <end+0x20a>
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	28 2b       	or	r18, r24
     4e2:	8f 89       	ldd	r24, Y+23	; 0x17
     4e4:	88 23       	and	r24, r24
     4e6:	11 f0       	breq	.+4      	; 0x4ec <end+0x216>
     4e8:	94 e0       	ldi	r25, 0x04	; 4
     4ea:	01 c0       	rjmp	.+2      	; 0x4ee <end+0x218>
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	29 2b       	or	r18, r25
     4f0:	88 8d       	ldd	r24, Y+24	; 0x18
     4f2:	88 23       	and	r24, r24
     4f4:	11 f0       	breq	.+4      	; 0x4fa <end+0x224>
     4f6:	98 e0       	ldi	r25, 0x08	; 8
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <end+0x226>
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	29 2b       	or	r18, r25
     4fe:	28 87       	std	Y+8, r18	; 0x08
     500:	fe 01       	movw	r30, r28
     502:	31 96       	adiw	r30, 0x01	; 1
     504:	a3 e3       	ldi	r26, 0x33	; 51
     506:	b1 e0       	ldi	r27, 0x01	; 1
     508:	ce 01       	movw	r24, r28
     50a:	07 96       	adiw	r24, 0x07	; 7
     50c:	41 91       	ld	r20, Z+
     50e:	4d 93       	st	X+, r20
     510:	e8 17       	cp	r30, r24
     512:	f9 07       	cpc	r31, r25
     514:	d9 f7       	brne	.-10     	; 0x50c <__stack+0xd>
     516:	30 93 39 01 	sts	0x0139, r19
     51a:	20 93 3a 01 	sts	0x013A, r18
     51e:	c7 5b       	subi	r28, 0xB7	; 183
     520:	df 4f       	sbci	r29, 0xFF	; 255
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	cf 91       	pop	r28
     52e:	df 91       	pop	r29
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <gamecubeProbe>:
     536:	10 92 32 01 	sts	0x0132, r1
     53a:	12 de       	rcall	.-988    	; 0x160 <gamecubeUpdate>
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 91 32 01 	lds	r25, 0x0132
     542:	91 11       	cpse	r25, r1
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	08 95       	ret

00000548 <gamecubeInit>:
     548:	1f 93       	push	r17
     54a:	1f b7       	in	r17, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	21 9a       	sbi	0x04, 1	; 4
     550:	29 98       	cbi	0x05, 1	; 5
     552:	3d 98       	cbi	0x07, 5	; 7
     554:	45 98       	cbi	0x08, 5	; 8
     556:	04 de       	rcall	.-1016   	; 0x160 <gamecubeUpdate>
     558:	1f bf       	out	0x3f, r17	; 63
     55a:	1f 91       	pop	r17
     55c:	08 95       	ret

0000055e <gamecubeGetGamepad>:
     55e:	80 e5       	ldi	r24, 0x50	; 80
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	90 93 05 01 	sts	0x0105, r25
     566:	80 93 04 01 	sts	0x0104, r24
     56a:	8f d2       	rcall	.+1310   	; 0xa8a <getUsbHidReportDescriptor_size>
     56c:	90 93 03 01 	sts	0x0103, r25
     570:	80 93 02 01 	sts	0x0102, r24
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	08 95       	ret

0000057a <hardwareInit>:
     57a:	17 b8       	out	0x07, r1	; 7
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	88 b9       	out	0x08, r24	; 8
     580:	88 ef       	ldi	r24, 0xF8	; 248
     582:	8b b9       	out	0x0b, r24	; 11
     584:	85 e0       	ldi	r24, 0x05	; 5
     586:	8a b9       	out	0x0a, r24	; 10
     588:	e7 ee       	ldi	r30, 0xE7	; 231
     58a:	f0 e8       	ldi	r31, 0x80	; 128
     58c:	31 97       	sbiw	r30, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <hardwareInit+0x12>
     590:	00 c0       	rjmp	.+0      	; 0x592 <hardwareInit+0x18>
     592:	00 00       	nop
     594:	1a b8       	out	0x0a, r1	; 10
     596:	85 bd       	out	0x25, r24	; 37
     598:	87 e0       	ldi	r24, 0x07	; 7
     59a:	80 93 b1 00 	sts	0x00B1, r24
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	80 93 b0 00 	sts	0x00B0, r24
     5a4:	84 ec       	ldi	r24, 0xC4	; 196
     5a6:	80 93 b3 00 	sts	0x00B3, r24
     5aa:	08 95       	ret

000005ac <usbFunctionSetup>:
     5ac:	fc 01       	movw	r30, r24
     5ae:	86 e4       	ldi	r24, 0x46	; 70
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	90 93 8e 01 	sts	0x018E, r25
     5b6:	80 93 8d 01 	sts	0x018D, r24
     5ba:	20 81       	ld	r18, Z
     5bc:	20 76       	andi	r18, 0x60	; 96
     5be:	20 32       	cpi	r18, 0x20	; 32
     5c0:	01 f5       	brne	.+64     	; 0x602 <usbFunctionSetup+0x56>
     5c2:	21 81       	ldd	r18, Z+1	; 0x01
     5c4:	21 30       	cpi	r18, 0x01	; 1
     5c6:	71 f4       	brne	.+28     	; 0x5e4 <usbFunctionSetup+0x38>
     5c8:	e0 91 43 01 	lds	r30, 0x0143
     5cc:	f0 91 44 01 	lds	r31, 0x0144
     5d0:	00 88       	ldd	r0, Z+16	; 0x10
     5d2:	f1 89       	ldd	r31, Z+17	; 0x11
     5d4:	e0 2d       	mov	r30, r0
     5d6:	09 95       	icall
     5d8:	e0 91 43 01 	lds	r30, 0x0143
     5dc:	f0 91 44 01 	lds	r31, 0x0144
     5e0:	80 81       	ld	r24, Z
     5e2:	08 95       	ret
     5e4:	22 30       	cpi	r18, 0x02	; 2
     5e6:	41 f4       	brne	.+16     	; 0x5f8 <usbFunctionSetup+0x4c>
     5e8:	85 e4       	ldi	r24, 0x45	; 69
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	90 93 8e 01 	sts	0x018E, r25
     5f0:	80 93 8d 01 	sts	0x018D, r24
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	08 95       	ret
     5f8:	2a 30       	cpi	r18, 0x0A	; 10
     5fa:	29 f4       	brne	.+10     	; 0x606 <usbFunctionSetup+0x5a>
     5fc:	83 81       	ldd	r24, Z+3	; 0x03
     5fe:	80 93 45 01 	sts	0x0145, r24
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	08 95       	ret
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	08 95       	ret

0000060a <main>:
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	df 93       	push	r29
     614:	cf 93       	push	r28
     616:	0f 92       	push	r0
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	ae df       	rcall	.-164    	; 0x57a <hardwareInit>
     61e:	27 d2       	rcall	.+1102   	; 0xa6e <n64GetGamepad>
     620:	90 93 44 01 	sts	0x0144, r25
     624:	80 93 43 01 	sts	0x0143, r24
     628:	dc 01       	movw	r26, r24
     62a:	1a 96       	adiw	r26, 0x0a	; 10
     62c:	ed 91       	ld	r30, X+
     62e:	fc 91       	ld	r31, X
     630:	1b 97       	sbiw	r26, 0x0b	; 11
     632:	09 95       	icall
     634:	e0 91 43 01 	lds	r30, 0x0143
     638:	f0 91 44 01 	lds	r31, 0x0144
     63c:	02 88       	ldd	r0, Z+18	; 0x12
     63e:	f3 89       	ldd	r31, Z+19	; 0x13
     640:	e0 2d       	mov	r30, r0
     642:	09 95       	icall
     644:	88 23       	and	r24, r24
     646:	51 f4       	brne	.+20     	; 0x65c <main+0x52>
     648:	8f e3       	ldi	r24, 0x3F	; 63
     64a:	99 e1       	ldi	r25, 0x19	; 25
     64c:	a1 e0       	ldi	r26, 0x01	; 1
     64e:	81 50       	subi	r24, 0x01	; 1
     650:	90 40       	sbci	r25, 0x00	; 0
     652:	a0 40       	sbci	r26, 0x00	; 0
     654:	e1 f7       	brne	.-8      	; 0x64e <main+0x44>
     656:	00 c0       	rjmp	.+0      	; 0x658 <main+0x4e>
     658:	00 00       	nop
     65a:	e1 cf       	rjmp	.-62     	; 0x61e <main+0x14>
     65c:	e0 91 43 01 	lds	r30, 0x0143
     660:	f0 91 44 01 	lds	r31, 0x0144
     664:	84 81       	ldd	r24, Z+4	; 0x04
     666:	95 81       	ldd	r25, Z+5	; 0x05
     668:	90 93 95 01 	sts	0x0195, r25
     66c:	80 93 94 01 	sts	0x0194, r24
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	80 93 7b 01 	sts	0x017B, r24
     676:	84 e3       	ldi	r24, 0x34	; 52
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	90 93 7d 01 	sts	0x017D, r25
     67e:	80 93 7c 01 	sts	0x017C, r24
     682:	43 dd       	rcall	.-1402   	; 0x10a <getUsbDescrDevice_size>
     684:	80 93 91 01 	sts	0x0191, r24
     688:	78 df       	rcall	.-272    	; 0x57a <hardwareInit>
     68a:	e0 91 43 01 	lds	r30, 0x0143
     68e:	f0 91 44 01 	lds	r31, 0x0144
     692:	02 84       	ldd	r0, Z+10	; 0x0a
     694:	f3 85       	ldd	r31, Z+11	; 0x0b
     696:	e0 2d       	mov	r30, r0
     698:	09 95       	icall
     69a:	2f e0       	ldi	r18, 0x0F	; 15
     69c:	88 e1       	ldi	r24, 0x18	; 24
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	a8 95       	wdr
     6a6:	80 93 60 00 	sts	0x0060, r24
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	20 93 60 00 	sts	0x0060, r18
     6b0:	32 d3       	rcall	.+1636   	; 0xd16 <usbInit>
     6b2:	78 94       	sei
     6b4:	10 e0       	ldi	r17, 0x00	; 0
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	ee 24       	eor	r14, r14
     6ba:	ff 24       	eor	r15, r15
     6bc:	f3 94       	inc	r15
     6be:	02 e0       	ldi	r16, 0x02	; 2
     6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <main+0xbe>
     6c2:	ee 24       	eor	r14, r14
     6c4:	e3 94       	inc	r14
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	a8 95       	wdr
     6ca:	89 83       	std	Y+1, r24	; 0x01
     6cc:	0d d2       	rcall	.+1050   	; 0xae8 <usbPoll>
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	88 23       	and	r24, r24
     6d2:	41 f0       	breq	.+16     	; 0x6e4 <main+0xda>
     6d4:	e0 91 43 01 	lds	r30, 0x0143
     6d8:	f0 91 44 01 	lds	r31, 0x0144
     6dc:	04 84       	ldd	r0, Z+12	; 0x0c
     6de:	f5 85       	ldd	r31, Z+13	; 0x0d
     6e0:	e0 2d       	mov	r30, r0
     6e2:	09 95       	icall
     6e4:	a8 9b       	sbis	0x15, 0	; 21
     6e6:	0c c0       	rjmp	.+24     	; 0x700 <main+0xf6>
     6e8:	f5 ba       	out	0x15, r15	; 21
     6ea:	80 91 45 01 	lds	r24, 0x0145
     6ee:	88 23       	and	r24, r24
     6f0:	39 f0       	breq	.+14     	; 0x700 <main+0xf6>
     6f2:	15 30       	cpi	r17, 0x05	; 5
     6f4:	10 f0       	brcs	.+4      	; 0x6fa <main+0xf0>
     6f6:	15 50       	subi	r17, 0x05	; 5
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <main+0xf6>
     6fa:	18 2f       	mov	r17, r24
     6fc:	ee 24       	eor	r14, r14
     6fe:	e3 94       	inc	r14
     700:	b9 9b       	sbis	0x17, 1	; 23
     702:	16 c0       	rjmp	.+44     	; 0x730 <main+0x126>
     704:	07 bb       	out	0x17, r16	; 23
     706:	ee 20       	and	r14, r14
     708:	a9 f4       	brne	.+42     	; 0x734 <main+0x12a>
     70a:	e0 91 43 01 	lds	r30, 0x0143
     70e:	f0 91 44 01 	lds	r31, 0x0144
     712:	04 84       	ldd	r0, Z+12	; 0x0c
     714:	f5 85       	ldd	r31, Z+13	; 0x0d
     716:	e0 2d       	mov	r30, r0
     718:	09 95       	icall
     71a:	e0 91 43 01 	lds	r30, 0x0143
     71e:	f0 91 44 01 	lds	r31, 0x0144
     722:	06 84       	ldd	r0, Z+14	; 0x0e
     724:	f7 85       	ldd	r31, Z+15	; 0x0f
     726:	e0 2d       	mov	r30, r0
     728:	09 95       	icall
     72a:	88 23       	and	r24, r24
     72c:	19 f4       	brne	.+6      	; 0x734 <main+0x12a>
     72e:	cb cf       	rjmp	.-106    	; 0x6c6 <main+0xbc>
     730:	ee 20       	and	r14, r14
     732:	49 f2       	breq	.-110    	; 0x6c6 <main+0xbc>
     734:	80 91 2e 01 	lds	r24, 0x012E
     738:	8f 3f       	cpi	r24, 0xFF	; 255
     73a:	19 f6       	brne	.-122    	; 0x6c2 <main+0xb8>
     73c:	e0 91 43 01 	lds	r30, 0x0143
     740:	f0 91 44 01 	lds	r31, 0x0144
     744:	00 88       	ldd	r0, Z+16	; 0x10
     746:	f1 89       	ldd	r31, Z+17	; 0x11
     748:	e0 2d       	mov	r30, r0
     74a:	86 e4       	ldi	r24, 0x46	; 70
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	09 95       	icall
     750:	e0 91 43 01 	lds	r30, 0x0143
     754:	f0 91 44 01 	lds	r31, 0x0144
     758:	86 e4       	ldi	r24, 0x46	; 70
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	60 81       	ld	r22, Z
     75e:	98 d1       	rcall	.+816    	; 0xa90 <usbSetInterrupt>
     760:	ee 24       	eor	r14, r14
     762:	b1 cf       	rjmp	.-158    	; 0x6c6 <main+0xbc>

00000764 <n64BuildReport>:
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	69 f0       	breq	.+26     	; 0x782 <n64BuildReport+0x1e>
     768:	20 91 4f 01 	lds	r18, 0x014F
     76c:	30 91 50 01 	lds	r19, 0x0150
     770:	40 91 51 01 	lds	r20, 0x0151
     774:	50 91 52 01 	lds	r21, 0x0152
     778:	fc 01       	movw	r30, r24
     77a:	20 83       	st	Z, r18
     77c:	31 83       	std	Z+1, r19	; 0x01
     77e:	42 83       	std	Z+2, r20	; 0x02
     780:	53 83       	std	Z+3, r21	; 0x03
     782:	80 91 4f 01 	lds	r24, 0x014F
     786:	90 91 50 01 	lds	r25, 0x0150
     78a:	a0 91 51 01 	lds	r26, 0x0151
     78e:	b0 91 52 01 	lds	r27, 0x0152
     792:	80 93 53 01 	sts	0x0153, r24
     796:	90 93 54 01 	sts	0x0154, r25
     79a:	a0 93 55 01 	sts	0x0155, r26
     79e:	b0 93 56 01 	sts	0x0156, r27
     7a2:	08 95       	ret

000007a4 <n64Changed>:
     7a4:	80 91 2a 01 	lds	r24, 0x012A
     7a8:	90 91 2b 01 	lds	r25, 0x012B
     7ac:	00 97       	sbiw	r24, 0x00	; 0
     7ae:	31 f0       	breq	.+12     	; 0x7bc <n64Changed+0x18>
     7b0:	10 92 2b 01 	sts	0x012B, r1
     7b4:	10 92 2a 01 	sts	0x012A, r1
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	08 95       	ret
     7bc:	8f e4       	ldi	r24, 0x4F	; 79
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	63 e5       	ldi	r22, 0x53	; 83
     7c2:	71 e0       	ldi	r23, 0x01	; 1
     7c4:	44 e0       	ldi	r20, 0x04	; 4
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	6a d4       	rcall	.+2260   	; 0x109e <memcmp>
     7ca:	08 95       	ret

000007cc <_n64Update>:
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	df 93       	push	r29
     7d2:	cf 93       	push	r28
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	c1 54       	subi	r28, 0x41	; 65
     7da:	d0 40       	sbci	r29, 0x00	; 0
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	fe 01       	movw	r30, r28
     7e8:	31 96       	adiw	r30, 0x01	; 1
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
     7ee:	00 e8       	ldi	r16, 0x80	; 128

000007f0 <nextBit>:
     7f0:	18 2f       	mov	r17, r24
     7f2:	10 23       	and	r17, r16
     7f4:	a9 f0       	breq	.+42     	; 0x820 <send0>
	...

000007f8 <send1>:
     7f8:	3d 9a       	sbi	0x07, 5	; 7
	...
     80e:	3d 98       	cbi	0x07, 5	; 7
     810:	38 e0       	ldi	r19, 0x08	; 8

00000812 <lp1>:
     812:	3a 95       	dec	r19
     814:	f1 f7       	brne	.-4      	; 0x812 <lp1>
     816:	00 00       	nop
     818:	00 00       	nop
     81a:	06 95       	lsr	r16
     81c:	61 f0       	breq	.+24     	; 0x836 <done>
     81e:	e8 cf       	rjmp	.-48     	; 0x7f0 <nextBit>

00000820 <send0>:
     820:	3d 9a       	sbi	0x07, 5	; 7
     822:	3b e0       	ldi	r19, 0x0B	; 11

00000824 <lp0>:
     824:	3a 95       	dec	r19
     826:	f1 f7       	brne	.-4      	; 0x824 <lp0>
     828:	00 00       	nop
     82a:	3d 98       	cbi	0x07, 5	; 7
     82c:	00 00       	nop
     82e:	00 00       	nop
     830:	06 95       	lsr	r16
     832:	09 f0       	breq	.+2      	; 0x836 <done>
     834:	dd cf       	rjmp	.-70     	; 0x7f0 <nextBit>

00000836 <done>:
     836:	3d 98       	cbi	0x07, 5	; 7
	...
     848:	00 00       	nop
     84a:	3d 9a       	sbi	0x07, 5	; 7
	...
     854:	3d 98       	cbi	0x07, 5	; 7
     856:	30 e2       	ldi	r19, 0x20	; 32

00000858 <st>:
     858:	0f ef       	ldi	r16, 0xFF	; 255

0000085a <waitFall>:
     85a:	0a 95       	dec	r16
     85c:	29 f1       	breq	.+74     	; 0x8a8 <timeout>
     85e:	16 b1       	in	r17, 0x06	; 6
     860:	10 72       	andi	r17, 0x20	; 32
     862:	d9 f7       	brne	.-10     	; 0x85a <waitFall>
     864:	29 98       	cbi	0x05, 1	; 5
	...
     882:	00 00       	nop
     884:	26 b1       	in	r18, 0x06	; 6
     886:	29 9a       	sbi	0x05, 1	; 5
     888:	20 72       	andi	r18, 0x20	; 32
     88a:	21 93       	st	Z+, r18
     88c:	3a 95       	dec	r19
     88e:	39 f0       	breq	.+14     	; 0x89e <ok>
     890:	0f ef       	ldi	r16, 0xFF	; 255

00000892 <waitHigh>:
     892:	0a 95       	dec	r16
     894:	49 f0       	breq	.+18     	; 0x8a8 <timeout>
     896:	26 b1       	in	r18, 0x06	; 6
     898:	20 72       	andi	r18, 0x20	; 32
     89a:	f1 f6       	brne	.-68     	; 0x858 <st>
     89c:	fa cf       	rjmp	.-12     	; 0x892 <waitHigh>

0000089e <ok>:
     89e:	88 27       	eor	r24, r24
     8a0:	05 c0       	rjmp	.+10     	; 0x8ac <end>

000008a2 <error>:
     8a2:	29 9a       	sbi	0x05, 1	; 5
     8a4:	83 2f       	mov	r24, r19
     8a6:	02 c0       	rjmp	.+4      	; 0x8ac <end>

000008a8 <timeout>:
     8a8:	88 27       	eor	r24, r24
     8aa:	80 95       	com	r24

000008ac <end>:
     8ac:	ff 91       	pop	r31
     8ae:	ef 91       	pop	r30
     8b0:	29 98       	cbi	0x05, 1	; 5
     8b2:	8f 3f       	cpi	r24, 0xFF	; 255
     8b4:	21 f4       	brne	.+8      	; 0x8be <end+0x12>
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	80 93 4e 01 	sts	0x014E, r24
     8bc:	a5 c0       	rjmp	.+330    	; 0xa08 <end+0x15c>
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	21 e0       	ldi	r18, 0x01	; 1
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	df 01       	movw	r26, r30
     8ca:	a8 0f       	add	r26, r24
     8cc:	b9 1f       	adc	r27, r25
     8ce:	4c 91       	ld	r20, X
     8d0:	44 23       	and	r20, r20
     8d2:	41 f0       	breq	.+16     	; 0x8e4 <end+0x38>
     8d4:	a9 01       	movw	r20, r18
     8d6:	08 2e       	mov	r0, r24
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <end+0x32>
     8da:	44 0f       	add	r20, r20
     8dc:	55 1f       	adc	r21, r21
     8de:	0a 94       	dec	r0
     8e0:	e2 f7       	brpl	.-8      	; 0x8da <end+0x2e>
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <end+0x3a>
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	64 2b       	or	r22, r20
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	84 30       	cpi	r24, 0x04	; 4
     8ec:	91 05       	cpc	r25, r1
     8ee:	61 f7       	brne	.-40     	; 0x8c8 <end+0x1c>
     8f0:	8d 85       	ldd	r24, Y+13	; 0x0d
     8f2:	88 23       	and	r24, r24
     8f4:	11 f0       	breq	.+4      	; 0x8fa <end+0x4e>
     8f6:	20 e1       	ldi	r18, 0x10	; 16
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <end+0x50>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	62 2b       	or	r22, r18
     8fe:	8e 85       	ldd	r24, Y+14	; 0x0e
     900:	88 23       	and	r24, r24
     902:	11 f0       	breq	.+4      	; 0x908 <end+0x5c>
     904:	20 e2       	ldi	r18, 0x20	; 32
     906:	01 c0       	rjmp	.+2      	; 0x90a <end+0x5e>
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	26 2b       	or	r18, r22
     90c:	8f 85       	ldd	r24, Y+15	; 0x0f
     90e:	88 23       	and	r24, r24
     910:	11 f0       	breq	.+4      	; 0x916 <end+0x6a>
     912:	90 e4       	ldi	r25, 0x40	; 64
     914:	01 c0       	rjmp	.+2      	; 0x918 <end+0x6c>
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	92 2b       	or	r25, r18
     91a:	88 89       	ldd	r24, Y+16	; 0x10
     91c:	88 23       	and	r24, r24
     91e:	11 f0       	breq	.+4      	; 0x924 <end+0x78>
     920:	80 e8       	ldi	r24, 0x80	; 128
     922:	01 c0       	rjmp	.+2      	; 0x926 <end+0x7a>
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 2f       	mov	r16, r24
     928:	09 2b       	or	r16, r25
     92a:	9b 85       	ldd	r25, Y+11	; 0x0b
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	99 23       	and	r25, r25
     930:	09 f4       	brne	.+2      	; 0x934 <end+0x88>
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	9c 85       	ldd	r25, Y+12	; 0x0c
     936:	99 23       	and	r25, r25
     938:	11 f4       	brne	.+4      	; 0x93e <end+0x92>
     93a:	10 e0       	ldi	r17, 0x00	; 0
     93c:	01 c0       	rjmp	.+2      	; 0x940 <end+0x94>
     93e:	12 e0       	ldi	r17, 0x02	; 2
     940:	18 2b       	or	r17, r24
     942:	b0 e0       	ldi	r27, 0x00	; 0
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	ae 01       	movw	r20, r28
     94a:	4f 5f       	subi	r20, 0xFF	; 255
     94c:	5f 4f       	sbci	r21, 0xFF	; 255
     94e:	20 e8       	ldi	r18, 0x80	; 128
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	fc 01       	movw	r30, r24
     954:	70 96       	adiw	r30, 0x10	; 16
     956:	e4 0f       	add	r30, r20
     958:	f5 1f       	adc	r31, r21
     95a:	60 81       	ld	r22, Z
     95c:	66 23       	and	r22, r22
     95e:	41 f0       	breq	.+16     	; 0x970 <end+0xc4>
     960:	b9 01       	movw	r22, r18
     962:	08 2e       	mov	r0, r24
     964:	02 c0       	rjmp	.+4      	; 0x96a <end+0xbe>
     966:	75 95       	asr	r23
     968:	67 95       	ror	r22
     96a:	0a 94       	dec	r0
     96c:	e2 f7       	brpl	.-8      	; 0x966 <end+0xba>
     96e:	01 c0       	rjmp	.+2      	; 0x972 <end+0xc6>
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	b6 2b       	or	r27, r22
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	88 30       	cpi	r24, 0x08	; 8
     978:	91 05       	cpc	r25, r1
     97a:	59 f7       	brne	.-42     	; 0x952 <end+0xa6>
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	ae 01       	movw	r20, r28
     984:	4f 5f       	subi	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	20 e8       	ldi	r18, 0x80	; 128
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	fc 01       	movw	r30, r24
     98e:	78 96       	adiw	r30, 0x18	; 24
     990:	e4 0f       	add	r30, r20
     992:	f5 1f       	adc	r31, r21
     994:	60 81       	ld	r22, Z
     996:	66 23       	and	r22, r22
     998:	41 f0       	breq	.+16     	; 0x9aa <end+0xfe>
     99a:	b9 01       	movw	r22, r18
     99c:	08 2e       	mov	r0, r24
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <end+0xf8>
     9a0:	75 95       	asr	r23
     9a2:	67 95       	ror	r22
     9a4:	0a 94       	dec	r0
     9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <end+0xf4>
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <end+0x100>
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	a6 2b       	or	r26, r22
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	88 30       	cpi	r24, 0x08	; 8
     9b2:	91 05       	cpc	r25, r1
     9b4:	59 f7       	brne	.-42     	; 0x98c <end+0xe0>
     9b6:	b1 58       	subi	r27, 0x81	; 129
     9b8:	b0 93 4f 01 	sts	0x014F, r27
     9bc:	8f e7       	ldi	r24, 0x7F	; 127
     9be:	8a 1b       	sub	r24, r26
     9c0:	80 93 50 01 	sts	0x0150, r24
     9c4:	00 93 51 01 	sts	0x0151, r16
     9c8:	10 93 52 01 	sts	0x0152, r17
     9cc:	8d 81       	ldd	r24, Y+5	; 0x05
     9ce:	88 23       	and	r24, r24
     9d0:	19 f0       	breq	.+6      	; 0x9d8 <end+0x12c>
     9d2:	14 60       	ori	r17, 0x04	; 4
     9d4:	10 93 52 01 	sts	0x0152, r17
     9d8:	8e 81       	ldd	r24, Y+6	; 0x06
     9da:	88 23       	and	r24, r24
     9dc:	29 f0       	breq	.+10     	; 0x9e8 <end+0x13c>
     9de:	80 91 52 01 	lds	r24, 0x0152
     9e2:	88 60       	ori	r24, 0x08	; 8
     9e4:	80 93 52 01 	sts	0x0152, r24
     9e8:	8f 81       	ldd	r24, Y+7	; 0x07
     9ea:	88 23       	and	r24, r24
     9ec:	29 f0       	breq	.+10     	; 0x9f8 <end+0x14c>
     9ee:	80 91 52 01 	lds	r24, 0x0152
     9f2:	80 61       	ori	r24, 0x10	; 16
     9f4:	80 93 52 01 	sts	0x0152, r24
     9f8:	88 85       	ldd	r24, Y+8	; 0x08
     9fa:	88 23       	and	r24, r24
     9fc:	29 f0       	breq	.+10     	; 0xa08 <end+0x15c>
     9fe:	80 91 52 01 	lds	r24, 0x0152
     a02:	80 62       	ori	r24, 0x20	; 32
     a04:	80 93 52 01 	sts	0x0152, r24
     a08:	cf 5b       	subi	r28, 0xBF	; 191
     a0a:	df 4f       	sbci	r29, 0xFF	; 255
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	cf 91       	pop	r28
     a18:	df 91       	pop	r29
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	08 95       	ret

00000a20 <n64Update>:
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	d4 de       	rcall	.-600    	; 0x7cc <_n64Update>
     a24:	08 95       	ret

00000a26 <n64Probe>:
     a26:	1f 93       	push	r17
     a28:	1f e0       	ldi	r17, 0x0F	; 15
     a2a:	8f e3       	ldi	r24, 0x3F	; 63
     a2c:	99 e1       	ldi	r25, 0x19	; 25
     a2e:	a1 e0       	ldi	r26, 0x01	; 1
     a30:	81 50       	subi	r24, 0x01	; 1
     a32:	90 40       	sbci	r25, 0x00	; 0
     a34:	a0 40       	sbci	r26, 0x00	; 0
     a36:	e1 f7       	brne	.-8      	; 0xa30 <n64Probe+0xa>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <n64Probe+0x14>
     a3a:	00 00       	nop
     a3c:	10 92 4e 01 	sts	0x014E, r1
     a40:	ef df       	rcall	.-34     	; 0xa20 <n64Update>
     a42:	80 91 4e 01 	lds	r24, 0x014E
     a46:	88 23       	and	r24, r24
     a48:	21 f0       	breq	.+8      	; 0xa52 <n64Probe+0x2c>
     a4a:	11 50       	subi	r17, 0x01	; 1
     a4c:	71 f7       	brne	.-36     	; 0xa2a <n64Probe+0x4>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <n64Probe+0x2e>
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	1f 91       	pop	r17
     a56:	08 95       	ret

00000a58 <n64Init>:
     a58:	1f 93       	push	r17
     a5a:	1f b7       	in	r17, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	21 9a       	sbi	0x04, 1	; 4
     a60:	29 98       	cbi	0x05, 1	; 5
     a62:	3d 98       	cbi	0x07, 5	; 7
     a64:	45 98       	cbi	0x08, 5	; 8
     a66:	dc df       	rcall	.-72     	; 0xa20 <n64Update>
     a68:	1f bf       	out	0x3f, r17	; 63
     a6a:	1f 91       	pop	r17
     a6c:	08 95       	ret

00000a6e <n64GetGamepad>:
     a6e:	80 e5       	ldi	r24, 0x50	; 80
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	90 93 1b 01 	sts	0x011B, r25
     a76:	80 93 1a 01 	sts	0x011A, r24
     a7a:	07 d0       	rcall	.+14     	; 0xa8a <getUsbHidReportDescriptor_size>
     a7c:	90 93 19 01 	sts	0x0119, r25
     a80:	80 93 18 01 	sts	0x0118, r24
     a84:	86 e1       	ldi	r24, 0x16	; 22
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	08 95       	ret

00000a8a <getUsbHidReportDescriptor_size>:
     a8a:	8d e2       	ldi	r24, 0x2D	; 45
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	08 95       	ret

00000a90 <usbSetInterrupt>:
     a90:	1f 93       	push	r17
     a92:	16 2f       	mov	r17, r22
     a94:	69 30       	cpi	r22, 0x09	; 9
     a96:	08 f0       	brcs	.+2      	; 0xa9a <usbSetInterrupt+0xa>
     a98:	18 e0       	ldi	r17, 0x08	; 8
     a9a:	30 91 6e 01 	lds	r19, 0x016E
     a9e:	30 ff       	sbrs	r19, 0
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <usbSetInterrupt+0x16>
     aa2:	23 ec       	ldi	r18, 0xC3	; 195
     aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <usbSetInterrupt+0x18>
     aa6:	2b e4       	ldi	r18, 0x4B	; 75
     aa8:	40 91 2e 01 	lds	r20, 0x012E
     aac:	47 ff       	sbrs	r20, 7
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <usbSetInterrupt+0x28>
     ab0:	3f 5f       	subi	r19, 0xFF	; 255
     ab2:	30 93 6e 01 	sts	0x016E, r19
     ab6:	03 c0       	rjmp	.+6      	; 0xabe <usbSetInterrupt+0x2e>
     ab8:	3f ef       	ldi	r19, 0xFF	; 255
     aba:	30 93 2e 01 	sts	0x012E, r19
     abe:	20 93 7f 01 	sts	0x017F, r18
     ac2:	dc 01       	movw	r26, r24
     ac4:	81 2f       	mov	r24, r17
     ac6:	e0 e8       	ldi	r30, 0x80	; 128
     ac8:	f1 e0       	ldi	r31, 0x01	; 1
     aca:	03 c0       	rjmp	.+6      	; 0xad2 <usbSetInterrupt+0x42>
     acc:	9d 91       	ld	r25, X+
     ace:	91 93       	st	Z+, r25
     ad0:	81 50       	subi	r24, 0x01	; 1
     ad2:	88 23       	and	r24, r24
     ad4:	d9 f7       	brne	.-10     	; 0xacc <usbSetInterrupt+0x3c>
     ad6:	80 e8       	ldi	r24, 0x80	; 128
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	61 2f       	mov	r22, r17
     adc:	dc d2       	rcall	.+1464   	; 0x1096 <usbCrc16Append>
     ade:	1c 5f       	subi	r17, 0xFC	; 252
     ae0:	10 93 2e 01 	sts	0x012E, r17
     ae4:	1f 91       	pop	r17
     ae6:	08 95       	ret

00000ae8 <usbPoll>:
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	90 91 8f 01 	lds	r25, 0x018F
     af0:	99 23       	and	r25, r25
     af2:	09 f4       	brne	.+2      	; 0xaf6 <usbPoll+0xe>
     af4:	a2 c0       	rjmp	.+324    	; 0xc3a <usbPoll+0x152>
     af6:	93 50       	subi	r25, 0x03	; 3
     af8:	97 fd       	sbrc	r25, 7
     afa:	9d c0       	rjmp	.+314    	; 0xc36 <usbPoll+0x14e>
     afc:	27 e5       	ldi	r18, 0x57	; 87
     afe:	31 e0       	ldi	r19, 0x01	; 1
     b00:	80 91 7e 01 	lds	r24, 0x017E
     b04:	8f 5f       	subi	r24, 0xFF	; 255
     b06:	40 91 8c 01 	lds	r20, 0x018C
     b0a:	4d 32       	cpi	r20, 0x2D	; 45
     b0c:	09 f0       	breq	.+2      	; 0xb10 <usbPoll+0x28>
     b0e:	8d c0       	rjmp	.+282    	; 0xc2a <usbPoll+0x142>
     b10:	98 30       	cpi	r25, 0x08	; 8
     b12:	09 f0       	breq	.+2      	; 0xb16 <usbPoll+0x2e>
     b14:	8a c0       	rjmp	.+276    	; 0xc2a <usbPoll+0x142>
     b16:	e8 2f       	mov	r30, r24
     b18:	f3 2f       	mov	r31, r19
     b1a:	90 81       	ld	r25, Z
     b1c:	90 76       	andi	r25, 0x60	; 96
     b1e:	09 f0       	breq	.+2      	; 0xb22 <usbPoll+0x3a>
     b20:	80 c0       	rjmp	.+256    	; 0xc22 <usbPoll+0x13a>
     b22:	10 92 79 01 	sts	0x0179, r1
     b26:	81 81       	ldd	r24, Z+1	; 0x01
     b28:	88 23       	and	r24, r24
     b2a:	39 f4       	brne	.+14     	; 0xb3a <usbPoll+0x52>
     b2c:	10 92 7a 01 	sts	0x017A, r1
     b30:	29 e7       	ldi	r18, 0x79	; 121
     b32:	31 e0       	ldi	r19, 0x01	; 1
     b34:	90 e8       	ldi	r25, 0x80	; 128
     b36:	82 e0       	ldi	r24, 0x02	; 2
     b38:	68 c0       	rjmp	.+208    	; 0xc0a <usbPoll+0x122>
     b3a:	85 30       	cpi	r24, 0x05	; 5
     b3c:	21 f4       	brne	.+8      	; 0xb46 <usbPoll+0x5e>
     b3e:	82 81       	ldd	r24, Z+2	; 0x02
     b40:	80 93 90 01 	sts	0x0190, r24
     b44:	5e c0       	rjmp	.+188    	; 0xc02 <usbPoll+0x11a>
     b46:	86 30       	cpi	r24, 0x06	; 6
     b48:	91 f5       	brne	.+100    	; 0xbae <usbPoll+0xc6>
     b4a:	83 81       	ldd	r24, Z+3	; 0x03
     b4c:	81 30       	cpi	r24, 0x01	; 1
     b4e:	39 f4       	brne	.+14     	; 0xb5e <usbPoll+0x76>
     b50:	80 91 91 01 	lds	r24, 0x0191
     b54:	20 91 7c 01 	lds	r18, 0x017C
     b58:	30 91 7d 01 	lds	r19, 0x017D
     b5c:	26 c0       	rjmp	.+76     	; 0xbaa <usbPoll+0xc2>
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	a9 f1       	breq	.+106    	; 0xbcc <usbPoll+0xe4>
     b62:	83 30       	cpi	r24, 0x03	; 3
     b64:	c1 f4       	brne	.+48     	; 0xb96 <usbPoll+0xae>
     b66:	82 81       	ldd	r24, Z+2	; 0x02
     b68:	88 23       	and	r24, r24
     b6a:	a9 f1       	breq	.+106    	; 0xbd6 <usbPoll+0xee>
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	29 f4       	brne	.+10     	; 0xb7a <usbPoll+0x92>
     b70:	23 ea       	ldi	r18, 0xA3	; 163
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	90 ec       	ldi	r25, 0xC0	; 192
     b76:	88 e1       	ldi	r24, 0x18	; 24
     b78:	48 c0       	rjmp	.+144    	; 0xc0a <usbPoll+0x122>
     b7a:	82 30       	cpi	r24, 0x02	; 2
     b7c:	29 f4       	brne	.+10     	; 0xb88 <usbPoll+0xa0>
     b7e:	2b eb       	ldi	r18, 0xBB	; 187
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	90 ec       	ldi	r25, 0xC0	; 192
     b84:	86 e1       	ldi	r24, 0x16	; 22
     b86:	41 c0       	rjmp	.+130    	; 0xc0a <usbPoll+0x122>
     b88:	83 30       	cpi	r24, 0x03	; 3
     b8a:	79 f5       	brne	.+94     	; 0xbea <usbPoll+0x102>
     b8c:	26 e4       	ldi	r18, 0x46	; 70
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	90 ec       	ldi	r25, 0xC0	; 192
     b92:	8a e0       	ldi	r24, 0x0A	; 10
     b94:	3a c0       	rjmp	.+116    	; 0xc0a <usbPoll+0x122>
     b96:	81 32       	cpi	r24, 0x21	; 33
     b98:	19 f1       	breq	.+70     	; 0xbe0 <usbPoll+0xf8>
     b9a:	82 32       	cpi	r24, 0x22	; 34
     b9c:	31 f5       	brne	.+76     	; 0xbea <usbPoll+0x102>
     b9e:	80 91 7b 01 	lds	r24, 0x017B
     ba2:	20 91 94 01 	lds	r18, 0x0194
     ba6:	30 91 95 01 	lds	r19, 0x0195
     baa:	90 ec       	ldi	r25, 0xC0	; 192
     bac:	2e c0       	rjmp	.+92     	; 0xc0a <usbPoll+0x122>
     bae:	88 30       	cpi	r24, 0x08	; 8
     bb0:	01 f1       	breq	.+64     	; 0xbf2 <usbPoll+0x10a>
     bb2:	89 30       	cpi	r24, 0x09	; 9
     bb4:	21 f4       	brne	.+8      	; 0xbbe <usbPoll+0xd6>
     bb6:	82 81       	ldd	r24, Z+2	; 0x02
     bb8:	80 93 93 01 	sts	0x0193, r24
     bbc:	22 c0       	rjmp	.+68     	; 0xc02 <usbPoll+0x11a>
     bbe:	8a 30       	cpi	r24, 0x0A	; 10
     bc0:	d9 f0       	breq	.+54     	; 0xbf8 <usbPoll+0x110>
     bc2:	8b 30       	cpi	r24, 0x0B	; 11
     bc4:	f1 f4       	brne	.+60     	; 0xc02 <usbPoll+0x11a>
     bc6:	10 92 6e 01 	sts	0x016E, r1
     bca:	1b c0       	rjmp	.+54     	; 0xc02 <usbPoll+0x11a>
     bcc:	2d e7       	ldi	r18, 0x7D	; 125
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	90 ec       	ldi	r25, 0xC0	; 192
     bd2:	82 e2       	ldi	r24, 0x22	; 34
     bd4:	1a c0       	rjmp	.+52     	; 0xc0a <usbPoll+0x122>
     bd6:	2f e9       	ldi	r18, 0x9F	; 159
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	90 ec       	ldi	r25, 0xC0	; 192
     bdc:	84 e0       	ldi	r24, 0x04	; 4
     bde:	15 c0       	rjmp	.+42     	; 0xc0a <usbPoll+0x122>
     be0:	2f e8       	ldi	r18, 0x8F	; 143
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	90 ec       	ldi	r25, 0xC0	; 192
     be6:	89 e0       	ldi	r24, 0x09	; 9
     be8:	10 c0       	rjmp	.+32     	; 0xc0a <usbPoll+0x122>
     bea:	29 e7       	ldi	r18, 0x79	; 121
     bec:	31 e0       	ldi	r19, 0x01	; 1
     bee:	90 ec       	ldi	r25, 0xC0	; 192
     bf0:	0b c0       	rjmp	.+22     	; 0xc08 <usbPoll+0x120>
     bf2:	23 e9       	ldi	r18, 0x93	; 147
     bf4:	31 e0       	ldi	r19, 0x01	; 1
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <usbPoll+0x114>
     bf8:	29 e7       	ldi	r18, 0x79	; 121
     bfa:	31 e0       	ldi	r19, 0x01	; 1
     bfc:	90 e8       	ldi	r25, 0x80	; 128
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	04 c0       	rjmp	.+8      	; 0xc0a <usbPoll+0x122>
     c02:	29 e7       	ldi	r18, 0x79	; 121
     c04:	31 e0       	ldi	r19, 0x01	; 1
     c06:	90 e8       	ldi	r25, 0x80	; 128
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	30 93 8e 01 	sts	0x018E, r19
     c0e:	20 93 8d 01 	sts	0x018D, r18
     c12:	27 81       	ldd	r18, Z+7	; 0x07
     c14:	22 23       	and	r18, r18
     c16:	59 f4       	brne	.+22     	; 0xc2e <usbPoll+0x146>
     c18:	26 81       	ldd	r18, Z+6	; 0x06
     c1a:	28 17       	cp	r18, r24
     c1c:	40 f4       	brcc	.+16     	; 0xc2e <usbPoll+0x146>
     c1e:	82 2f       	mov	r24, r18
     c20:	06 c0       	rjmp	.+12     	; 0xc2e <usbPoll+0x146>
     c22:	93 2f       	mov	r25, r19
     c24:	c3 dc       	rcall	.-1658   	; 0x5ac <usbFunctionSetup>
     c26:	90 e8       	ldi	r25, 0x80	; 128
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <usbPoll+0x146>
     c2a:	90 e8       	ldi	r25, 0x80	; 128
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 93 6f 01 	sts	0x016F, r25
     c32:	80 93 2c 01 	sts	0x012C, r24
     c36:	10 92 8f 01 	sts	0x018F, r1
     c3a:	80 91 2c 01 	lds	r24, 0x012C
     c3e:	8f 3f       	cpi	r24, 0xFF	; 255
     c40:	09 f4       	brne	.+2      	; 0xc44 <usbPoll+0x15c>
     c42:	4f c0       	rjmp	.+158    	; 0xce2 <usbPoll+0x1fa>
     c44:	90 91 2d 01 	lds	r25, 0x012D
     c48:	97 ff       	sbrs	r25, 7
     c4a:	4b c0       	rjmp	.+150    	; 0xce2 <usbPoll+0x1fa>
     c4c:	18 2f       	mov	r17, r24
     c4e:	89 30       	cpi	r24, 0x09	; 9
     c50:	08 f0       	brcs	.+2      	; 0xc54 <usbPoll+0x16c>
     c52:	18 e0       	ldi	r17, 0x08	; 8
     c54:	81 1b       	sub	r24, r17
     c56:	80 93 2c 01 	sts	0x012C, r24
     c5a:	20 91 6f 01 	lds	r18, 0x016F
     c5e:	20 ff       	sbrs	r18, 0
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <usbPoll+0x17e>
     c62:	03 ec       	ldi	r16, 0xC3	; 195
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <usbPoll+0x180>
     c66:	0b e4       	ldi	r16, 0x4B	; 75
     c68:	2f 5f       	subi	r18, 0xFF	; 255
     c6a:	20 93 6f 01 	sts	0x016F, r18
     c6e:	80 91 8d 01 	lds	r24, 0x018D
     c72:	90 91 8e 01 	lds	r25, 0x018E
     c76:	26 fd       	sbrc	r18, 6
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <usbPoll+0x19c>
     c7a:	dc 01       	movw	r26, r24
     c7c:	21 2f       	mov	r18, r17
     c7e:	e1 e7       	ldi	r30, 0x71	; 113
     c80:	f1 e0       	ldi	r31, 0x01	; 1
     c82:	18 c0       	rjmp	.+48     	; 0xcb4 <usbPoll+0x1cc>
     c84:	30 91 7b 01 	lds	r19, 0x017B
     c88:	a1 e7       	ldi	r26, 0x71	; 113
     c8a:	b1 e0       	ldi	r27, 0x01	; 1
     c8c:	21 2f       	mov	r18, r17
     c8e:	fc 01       	movw	r30, r24
     c90:	0b c0       	rjmp	.+22     	; 0xca8 <usbPoll+0x1c0>
     c92:	44 91       	lpm	r20, Z+
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	e6 39       	cpi	r30, 0x96	; 150
     c98:	f5 07       	cpc	r31, r21
     c9a:	11 f4       	brne	.+4      	; 0xca0 <usbPoll+0x1b8>
     c9c:	3c 93       	st	X, r19
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <usbPoll+0x1ba>
     ca0:	4c 93       	st	X, r20
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	21 50       	subi	r18, 0x01	; 1
     ca6:	11 96       	adiw	r26, 0x01	; 1
     ca8:	22 23       	and	r18, r18
     caa:	99 f7       	brne	.-26     	; 0xc92 <usbPoll+0x1aa>
     cac:	05 c0       	rjmp	.+10     	; 0xcb8 <usbPoll+0x1d0>
     cae:	3d 91       	ld	r19, X+
     cb0:	31 93       	st	Z+, r19
     cb2:	21 50       	subi	r18, 0x01	; 1
     cb4:	22 23       	and	r18, r18
     cb6:	d9 f7       	brne	.-10     	; 0xcae <usbPoll+0x1c6>
     cb8:	81 0f       	add	r24, r17
     cba:	91 1d       	adc	r25, r1
     cbc:	90 93 8e 01 	sts	0x018E, r25
     cc0:	80 93 8d 01 	sts	0x018D, r24
     cc4:	81 e7       	ldi	r24, 0x71	; 113
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	61 2f       	mov	r22, r17
     cca:	e5 d1       	rcall	.+970    	; 0x1096 <usbCrc16Append>
     ccc:	81 2f       	mov	r24, r17
     cce:	8c 5f       	subi	r24, 0xFC	; 252
     cd0:	18 30       	cpi	r17, 0x08	; 8
     cd2:	19 f0       	breq	.+6      	; 0xcda <usbPoll+0x1f2>
     cd4:	9f ef       	ldi	r25, 0xFF	; 255
     cd6:	90 93 2c 01 	sts	0x012C, r25
     cda:	00 93 70 01 	sts	0x0170, r16
     cde:	80 93 2d 01 	sts	0x012D, r24
     ce2:	89 b1       	in	r24, 0x09	; 9
     ce4:	85 70       	andi	r24, 0x05	; 5
     ce6:	19 f0       	breq	.+6      	; 0xcee <usbPoll+0x206>
     ce8:	10 92 6d 01 	sts	0x016D, r1
     cec:	11 c0       	rjmp	.+34     	; 0xd10 <usbPoll+0x228>
     cee:	80 91 6d 01 	lds	r24, 0x016D
     cf2:	88 23       	and	r24, r24
     cf4:	69 f4       	brne	.+26     	; 0xd10 <usbPoll+0x228>
     cf6:	84 e6       	ldi	r24, 0x64	; 100
     cf8:	99 b1       	in	r25, 0x09	; 9
     cfa:	95 70       	andi	r25, 0x05	; 5
     cfc:	49 f4       	brne	.+18     	; 0xd10 <usbPoll+0x228>
     cfe:	81 50       	subi	r24, 0x01	; 1
     d00:	d9 f7       	brne	.-10     	; 0xcf8 <usbPoll+0x210>
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	80 93 6d 01 	sts	0x016D, r24
     d08:	10 92 90 01 	sts	0x0190, r1
     d0c:	10 92 8b 01 	sts	0x018B, r1
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <usbInit>:
     d16:	87 e5       	ldi	r24, 0x57	; 87
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	80 93 8a 01 	sts	0x018A, r24
     d1e:	0b 96       	adiw	r24, 0x0b	; 11
     d20:	80 93 7e 01 	sts	0x017E, r24
     d24:	e9 e6       	ldi	r30, 0x69	; 105
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	83 60       	ori	r24, 0x03	; 3
     d2c:	80 83       	st	Z, r24
     d2e:	e8 9a       	sbi	0x1d, 0	; 29
     d30:	08 95       	ret

00000d32 <__vector_1>:
;max allowable interrupt latency: 32 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), x1, SREG, x2, cnt, shift, YH, YL, x3, x4] = 11 bytes
usbInterrupt:
;order of registers pushed:
;x1, SREG, x2, cnt, shift, [YH, YL, x3]
    push    x1              ;2  push only what is necessary to sync with edge ASAP
     d32:	0f 93       	push	r16
    in      x1, SREG        ;1
     d34:	0f b7       	in	r16, 0x3f	; 63
    push    x1              ;2
     d36:	0f 93       	push	r16

00000d38 <waitForJ>:
;first part has no timeout because it waits for IDLE or SE1 (== disconnected)
#if !USB_CFG_SAMPLE_EXACT
    ldi     x1, 5           ;1 setup a timeout for waitForK
#endif
waitForJ:
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
     d38:	48 9b       	sbis	0x09, 0	; 9
    rjmp    waitForJ        ;2
     d3a:	fe cf       	rjmp	.-4      	; 0xd38 <waitForJ>
#if USB_CFG_SAMPLE_EXACT
;The following code represents the unrolled loop in the else branch. It
;results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
     d3c:	48 9b       	sbis	0x09, 0	; 9
    rjmp    foundK
     d3e:	06 c0       	rjmp	.+12     	; 0xd4c <foundK>
    sbis    USBIN, USBMINUS
     d40:	48 9b       	sbis	0x09, 0	; 9
    rjmp    foundK
     d42:	04 c0       	rjmp	.+8      	; 0xd4c <foundK>
    sbis    USBIN, USBMINUS
     d44:	48 9b       	sbis	0x09, 0	; 9
    rjmp    foundK
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <foundK>
    nop
     d48:	00 00       	nop
    nop2
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <foundK>

00000d4c <foundK>:
    sbic    USBIN, USBMINUS ;1 wait for D- == 0
    brne    waitForK        ;2
#endif
;{2, 6} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again:
    push    x2              ;2
     d4c:	1f 93       	push	r17
    push    cnt             ;2
     d4e:	3f 93       	push	r19
    push    shift           ;2
     d50:	2f 93       	push	r18

00000d52 <shortcutEntry>:
shortcutEntry:
    ldi     cnt, 1          ;1 pre-init bit counter (-1 because no dec follows, -1 because 1 bit already sampled)
     d52:	31 e0       	ldi	r19, 0x01	; 1
    ldi     x2, 1<<USB_CFG_DPLUS_BIT    ;1 -> 8   edge sync ended with D- == 0
     d54:	14 e0       	ldi	r17, 0x04	; 4

00000d56 <waitNoChange>:
;now wait until SYNC byte is over. Wait for either 2 bits low (success) or 2 bits high (failure)
waitNoChange:
    in      x1, USBIN       ;1 <-- sample, timing: edge + {2, 6} cycles
     d56:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1          ;1
     d58:	10 27       	eor	r17, r16
    sbrc    x2, 0           ;1 | 2
     d5a:	10 fd       	sbrc	r17, 0
    ldi     cnt, 2          ;1 | 0 cnt = numBits - 1 (because dec follows)
     d5c:	32 e0       	ldi	r19, 0x02	; 2
    mov     x2, x1          ;1
     d5e:	10 2f       	mov	r17, r16
    dec     cnt             ;1
     d60:	3a 95       	dec	r19
    brne    waitNoChange    ;2 | 1
     d62:	c9 f7       	brne	.-14     	; 0xd56 <waitNoChange>
    sbrc    x1, USBMINUS    ;2
     d64:	00 fd       	sbrc	r16, 0
    rjmp    sofError        ;0 two consecutive "1" bits -> framing error
     d66:	e7 c0       	rjmp	.+462    	; 0xf36 <sofError>
;start reading data, but don't check for bitstuffing because these are the
;first bits. Use the cycles for initialization instead. Note that we read and
;store the binary complement of the data stream because eor results in 1 for
;a change and 0 for no change.
    in      x1, USBIN       ;1 <-- sample bit 0, timing: edge + {3, 7} cycles
     d68:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1          ;1
     d6a:	10 27       	eor	r17, r16
    ror     x2              ;1
     d6c:	17 95       	ror	r17
    ldi     shift, 0x7f     ;1 The last bit of the sync pattern was a "no change"
     d6e:	2f e7       	ldi	r18, 0x7F	; 127
    ror     shift           ;1
     d70:	27 95       	ror	r18
    push    YH              ;2 -> 7
     d72:	df 93       	push	r29
    in      x2, USBIN       ;1 <-- sample bit 1, timing: edge + {2, 6} cycles
     d74:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2          ;1
     d76:	01 27       	eor	r16, r17
    ror     x1              ;1
     d78:	07 95       	ror	r16
    ror     shift           ;1
     d7a:	27 95       	ror	r18
    push    YL              ;2
     d7c:	cf 93       	push	r28
    lds     YL, usbInputBuf ;2 -> 8
     d7e:	c0 91 8a 01 	lds	r28, 0x018A
    in      x1, USBIN       ;1 <-- sample bit 2, timing: edge + {2, 6} cycles
     d82:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1          ;1
     d84:	10 27       	eor	r17, r16
    ror     x2              ;1
     d86:	17 95       	ror	r17
    ror     shift           ;1
     d88:	27 95       	ror	r18
    ldi     cnt, USB_BUFSIZE;1
     d8a:	3b e0       	ldi	r19, 0x0B	; 11
    ldi     YH, hi8(usbRxBuf);1 assume that usbRxBuf does not cross a page
     d8c:	d1 e0       	ldi	r29, 0x01	; 1
    push    x3              ;2 -> 8
     d8e:	4f 93       	push	r20
    in      x2, USBIN       ;1 <-- sample bit 3, timing: edge + {2, 6} cycles
     d90:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2          ;1
     d92:	01 27       	eor	r16, r17
    ror     x1              ;1
     d94:	07 95       	ror	r16
    ror     shift           ;1
     d96:	27 95       	ror	r18
    ser     x3              ;1
     d98:	4f ef       	ldi	r20, 0xFF	; 255
    nop                     ;1
     d9a:	00 00       	nop
    rjmp    rxbit4          ;2 -> 8
     d9c:	55 c0       	rjmp	.+170    	; 0xe48 <rxbit4>

00000d9e <shortcutToStart>:
shortcutToStart:            ;{,43} into next frame: max 5.5 sync bits missed
#if !USB_CFG_SAMPLE_EXACT
    ldi     x1, 5           ;2 setup timeout
#endif
waitForJ1:
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
     d9e:	48 9b       	sbis	0x09, 0	; 9
    rjmp    waitForJ1       ;2
     da0:	fe cf       	rjmp	.-4      	; 0xd9e <shortcutToStart>
#if USB_CFG_SAMPLE_EXACT
;The following code represents the unrolled loop in the else branch. It
;results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
     da2:	48 9b       	sbis	0x09, 0	; 9
    rjmp    foundK1
     da4:	06 c0       	rjmp	.+12     	; 0xdb2 <foundK1>
    sbis    USBIN, USBMINUS
     da6:	48 9b       	sbis	0x09, 0	; 9
    rjmp    foundK1
     da8:	04 c0       	rjmp	.+8      	; 0xdb2 <foundK1>
    sbis    USBIN, USBMINUS
     daa:	48 9b       	sbis	0x09, 0	; 9
    rjmp    foundK1
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <foundK1>
    nop
     dae:	00 00       	nop
    nop2
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <foundK1>

00000db2 <foundK1>:
waitForK1:
    dec     x1              ;1
    sbic    USBIN, USBMINUS ;1 wait for D- == 0
    brne    waitForK1       ;2
#endif
    pop     YH              ;2 correct stack alignment
     db2:	df 91       	pop	r29
    nop2                    ;2 delay for the same time as the pushes in the original code
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <foundK1+0x4>
    rjmp    shortcutEntry   ;2
     db6:	cd cf       	rjmp	.-102    	; 0xd52 <shortcutEntry>

00000db8 <stuffed5>:
; stuffed* helpers have the functionality of a subroutine, but we can't afford
; the overhead of a call. We therefore need a separate routine for each caller
; which jumps back appropriately.

stuffed5:               ;1 for branch taken
    in      x2, USBIN   ;1 <-- sample @ +1
     db8:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;1
     dba:	15 70       	andi	r17, 0x05	; 5
    breq    se0a        ;1
     dbc:	79 f1       	breq	.+94     	; 0xe1c <se0a>
    andi    x3, 0xc0    ;1 (0xff03 >> 2) & 0xff
     dbe:	40 7c       	andi	r20, 0xC0	; 192
    ori     shift, 0xfc ;1
     dc0:	2c 6f       	ori	r18, 0xFC	; 252
    rjmp    rxbit6      ;2
     dc2:	13 c0       	rjmp	.+38     	; 0xdea <rxbit6>

00000dc4 <stuffed6>:

stuffed6:               ;1 for branch taken
    in      x1, USBIN   ;1 <-- sample @ +1
     dc4:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK ;1
     dc6:	05 70       	andi	r16, 0x05	; 5
    breq    se0a        ;1
     dc8:	49 f1       	breq	.+82     	; 0xe1c <se0a>
    andi    x3, 0x81    ;1 (0xff03 >> 1) & 0xff
     dca:	41 78       	andi	r20, 0x81	; 129
    ori     shift, 0xfc ;1
     dcc:	2c 6f       	ori	r18, 0xFC	; 252
    rjmp    rxbit7      ;2
     dce:	15 c0       	rjmp	.+42     	; 0xdfa <rxbit7>

00000dd0 <stuffed7>:

; This is somewhat special because it has to compensate for the delay in bit 7
stuffed7:               ;1 for branch taken
    andi    x1, USBMASK ;1 already sampled by caller
     dd0:	05 70       	andi	r16, 0x05	; 5
    breq    se0a        ;1
     dd2:	21 f1       	breq	.+72     	; 0xe1c <se0a>
    mov     x2, x1      ;1 ensure correct NRZI sequence [we can save andi x3 here]
     dd4:	10 2f       	mov	r17, r16
    ori     shift, 0xfc ;1
     dd6:	2c 6f       	ori	r18, 0xFC	; 252
    in      x1, USBIN   ;1 <-- sample bit 0
     dd8:	09 b1       	in	r16, 0x09	; 9
    rjmp    unstuffed7  ;2
     dda:	19 c0       	rjmp	.+50     	; 0xe0e <unstuffed7>

00000ddc <stuffed0>:

stuffed0:               ;1 for branch taken
    in      x1, USBIN   ;1 <-- sample @ +1
     ddc:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK ;1
     dde:	05 70       	andi	r16, 0x05	; 5
    breq    se0a        ;1
     de0:	e9 f0       	breq	.+58     	; 0xe1c <se0a>
    andi    x3, 0xfe    ;1 (0xff03 >> 7) & 0xff
     de2:	4e 7f       	andi	r20, 0xFE	; 254
    ori     shift, 0xfc ;1
     de4:	2c 6f       	ori	r18, 0xFC	; 252
    rjmp    rxbit1      ;2
     de6:	18 c0       	rjmp	.+48     	; 0xe18 <rxbit1>

00000de8 <rxLoop>:

;-----------------------------
rxLoop:
    brlo    stuffed5    ;1
     de8:	38 f3       	brcs	.-50     	; 0xdb8 <stuffed5>

00000dea <rxbit6>:
rxbit6:
    in      x1, USBIN   ;1 <-- sample bit 6
     dea:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK ;1
     dec:	05 70       	andi	r16, 0x05	; 5
    breq    se0a        ;1
     dee:	b1 f0       	breq	.+44     	; 0xe1c <se0a>
    eor     x2, x1      ;1
     df0:	10 27       	eor	r17, r16
    ror     x2          ;1
     df2:	17 95       	ror	r17
    ror     shift       ;1
     df4:	27 95       	ror	r18
    cpi     shift, 4    ;1
     df6:	24 30       	cpi	r18, 0x04	; 4
    brlo    stuffed6    ;1
     df8:	28 f3       	brcs	.-54     	; 0xdc4 <stuffed6>

00000dfa <rxbit7>:
rxbit7:
    in      x2, USBIN   ;1 <-- sample bit 7
     dfa:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1
     dfc:	01 27       	eor	r16, r17
    ror     x1          ;1
     dfe:	07 95       	ror	r16
    ror     shift       ;1
     e00:	27 95       	ror	r18
    eor     x3, shift   ;1 x3 is 0 at bit locations we changed, 1 at others
     e02:	42 27       	eor	r20, r18
    st      y+, x3      ;2 the eor above reconstructed modified bits and inverted rx data
     e04:	49 93       	st	Y+, r20
    ser     x3          ;1
     e06:	4f ef       	ldi	r20, 0xFF	; 255

00000e08 <rxbit0>:
rxbit0:
    in      x1, USBIN   ;1 <-- sample bit 0
     e08:	09 b1       	in	r16, 0x09	; 9
    cpi     shift, 4    ;1
     e0a:	24 30       	cpi	r18, 0x04	; 4
    brlo    stuffed7    ;1
     e0c:	08 f3       	brcs	.-62     	; 0xdd0 <stuffed7>

00000e0e <unstuffed7>:
unstuffed7:
    eor     x2, x1      ;1
     e0e:	10 27       	eor	r17, r16
    ror     x2          ;1
     e10:	17 95       	ror	r17
    ror     shift       ;1
     e12:	27 95       	ror	r18
    cpi     shift, 4    ;1
     e14:	24 30       	cpi	r18, 0x04	; 4
    brlo    stuffed0    ;1
     e16:	10 f3       	brcs	.-60     	; 0xddc <stuffed0>

00000e18 <rxbit1>:
rxbit1:
    in      x2, USBIN   ;1 <-- sample bit 1
     e18:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;1
     e1a:	15 70       	andi	r17, 0x05	; 5

00000e1c <se0a>:
se0a:                   ; enlarge jump range to SE0
    breq    se0         ;1 check for SE0 more often close to start of byte
     e1c:	e1 f1       	breq	.+120    	; 0xe96 <se0>
    eor     x1, x2      ;1
     e1e:	01 27       	eor	r16, r17
    ror     x1          ;1
     e20:	07 95       	ror	r16
    ror     shift       ;1
     e22:	27 95       	ror	r18
    cpi     shift, 4    ;1
     e24:	24 30       	cpi	r18, 0x04	; 4
    brlo    stuffed1    ;1
     e26:	f0 f0       	brcs	.+60     	; 0xe64 <stuffed1>

00000e28 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 <-- sample bit 2
     e28:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK ;1
     e2a:	05 70       	andi	r16, 0x05	; 5
    breq    se0         ;1
     e2c:	a1 f1       	breq	.+104    	; 0xe96 <se0>
    eor     x2, x1      ;1
     e2e:	10 27       	eor	r17, r16
    ror     x2          ;1
     e30:	17 95       	ror	r17
    ror     shift       ;1
     e32:	27 95       	ror	r18
    cpi     shift, 4    ;1
     e34:	24 30       	cpi	r18, 0x04	; 4
    brlo    stuffed2    ;1
     e36:	e0 f0       	brcs	.+56     	; 0xe70 <stuffed2>

00000e38 <rxbit3>:
rxbit3:
    in      x2, USBIN   ;1 <-- sample bit 3
     e38:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1
     e3a:	01 27       	eor	r16, r17
    ror     x1          ;1
     e3c:	07 95       	ror	r16
    ror     shift       ;1
     e3e:	27 95       	ror	r18
    dec     cnt         ;1  check for buffer overflow
     e40:	3a 95       	dec	r19
    breq    overflow    ;1
     e42:	41 f1       	breq	.+80     	; 0xe94 <overflow>
    cpi     shift, 4    ;1
     e44:	24 30       	cpi	r18, 0x04	; 4
    brlo    stuffed3    ;1
     e46:	d0 f0       	brcs	.+52     	; 0xe7c <stuffed3>

00000e48 <rxbit4>:
rxbit4:
    in      x1, USBIN   ;1 <-- sample bit 4
     e48:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK ;1
     e4a:	05 70       	andi	r16, 0x05	; 5
    breq    se0         ;1
     e4c:	21 f1       	breq	.+72     	; 0xe96 <se0>
    eor     x2, x1      ;1
     e4e:	10 27       	eor	r17, r16
    ror     x2          ;1
     e50:	17 95       	ror	r17
    ror     shift       ;1
     e52:	27 95       	ror	r18
    cpi     shift, 4    ;1
     e54:	24 30       	cpi	r18, 0x04	; 4
    brlo    stuffed4    ;1
     e56:	c0 f0       	brcs	.+48     	; 0xe88 <stuffed4>

00000e58 <rxbit5>:
rxbit5:
    in      x2, USBIN   ;1 <-- sample bit 5
     e58:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1
     e5a:	01 27       	eor	r16, r17
    ror     x1          ;1
     e5c:	07 95       	ror	r16
    ror     shift       ;1
     e5e:	27 95       	ror	r18
    cpi     shift, 4    ;1
     e60:	24 30       	cpi	r18, 0x04	; 4
    rjmp    rxLoop      ;2
     e62:	c2 cf       	rjmp	.-124    	; 0xde8 <rxLoop>

00000e64 <stuffed1>:
;-----------------------------

stuffed1:               ;1 for branch taken
    in      x2, USBIN   ;1 <-- sample @ +1
     e64:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;1
     e66:	15 70       	andi	r17, 0x05	; 5
    breq    se0         ;1
     e68:	b1 f0       	breq	.+44     	; 0xe96 <se0>
    andi    x3, 0xfc    ;1 (0xff03 >> 6) & 0xff
     e6a:	4c 7f       	andi	r20, 0xFC	; 252
    ori     shift, 0xfc ;1
     e6c:	2c 6f       	ori	r18, 0xFC	; 252
    rjmp    rxbit2      ;2
     e6e:	dc cf       	rjmp	.-72     	; 0xe28 <rxbit2>

00000e70 <stuffed2>:

stuffed2:               ;1 for branch taken
    in      x1, USBIN   ;1 <-- sample @ +1
     e70:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK ;1
     e72:	05 70       	andi	r16, 0x05	; 5
    breq    se0         ;1
     e74:	81 f0       	breq	.+32     	; 0xe96 <se0>
    andi    x3, 0xf8    ;1 (0xff03 >> 5) & 0xff
     e76:	48 7f       	andi	r20, 0xF8	; 248
    ori     shift, 0xfc ;1
     e78:	2c 6f       	ori	r18, 0xFC	; 252
    rjmp    rxbit3      ;2
     e7a:	de cf       	rjmp	.-68     	; 0xe38 <rxbit3>

00000e7c <stuffed3>:

stuffed3:               ;1 for branch taken
    in      x2, USBIN   ;1 <-- sample @ +1
     e7c:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;1
     e7e:	15 70       	andi	r17, 0x05	; 5
    breq    se0         ;1
     e80:	51 f0       	breq	.+20     	; 0xe96 <se0>
    andi    x3, 0xf0    ;1 (0xff03 >> 4) & 0xff
     e82:	40 7f       	andi	r20, 0xF0	; 240
    ori     shift, 0xfc ;1
     e84:	2c 6f       	ori	r18, 0xFC	; 252
    rjmp    rxbit4      ;2
     e86:	e0 cf       	rjmp	.-64     	; 0xe48 <rxbit4>

00000e88 <stuffed4>:

stuffed4:               ;1 for branch taken
    in      x1, USBIN   ;1 <-- sample @ +1
     e88:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK ;1
     e8a:	05 70       	andi	r16, 0x05	; 5
    breq    se0         ;1
     e8c:	21 f0       	breq	.+8      	; 0xe96 <se0>
    andi    x3, 0xe0    ;1 (0xff03 >> 3) & 0xff
     e8e:	40 7e       	andi	r20, 0xE0	; 224
    ori     shift, 0xfc ;1
     e90:	2c 6f       	ori	r18, 0xFC	; 252
    rjmp    rxbit5      ;2
     e92:	e2 cf       	rjmp	.-60     	; 0xe58 <rxbit5>

00000e94 <overflow>:

;################ end receiver loop ###############

overflow:                   ; ignore package if buffer overflow
    rjmp    rxDoReturn      ; enlarge jump range
     e94:	3d c0       	rjmp	.+122    	; 0xf10 <rxDoReturn>

00000e96 <se0>:
;This is the only non-error exit point for the software receiver loop
;{4, 20} cycles after start of SE0, typically {10, 18} after SE0 start = {-6, 2} from end of SE0
;next sync starts {16,} cycles after SE0 -> worst case start: +4 from next sync start
;we don't check any CRCs here because there is no time left.
se0:                            ;{-6, 2} from end of SE0 / {,4} into next frame
    mov     cnt, YL             ;1 assume buffer in lower 256 bytes of memory
     e96:	3c 2f       	mov	r19, r28
    lds     YL, usbInputBuf     ;2 reposition to buffer start
     e98:	c0 91 8a 01 	lds	r28, 0x018A
    sub     cnt, YL             ;1 length of message
     e9c:	3c 1b       	sub	r19, r28
    ldi     x1, 1<<USB_INTR_PENDING_BIT ;1
     e9e:	01 e0       	ldi	r16, 0x01	; 1
    cpi     cnt, 3              ;1
     ea0:	33 30       	cpi	r19, 0x03	; 3
    out     USB_INTR_PENDING, x1;1 clear pending intr and check flag later. SE0 must be over. {,10} into next frame
     ea2:	0c bb       	out	0x1c, r16	; 28
    brlo    rxDoReturn          ;1 ensure valid packet size, ignore others
     ea4:	a8 f1       	brcs	.+106    	; 0xf10 <rxDoReturn>
    ld      x1, y               ;2 PID
     ea6:	08 81       	ld	r16, Y
    ldd     x2, y+1             ;2 ADDR + 1 bit endpoint number
     ea8:	19 81       	ldd	r17, Y+1	; 0x01
    mov     x3, x2              ;1 store for endpoint number
     eaa:	41 2f       	mov	r20, r17
    andi    x2, 0x7f            ;1 mask endpoint number bit
     eac:	1f 77       	andi	r17, 0x7F	; 127
    lds     shift, usbDeviceAddr;2
     eae:	20 91 8b 01 	lds	r18, 0x018B
    cpi     x1, USBPID_SETUP    ;1
     eb2:	0d 32       	cpi	r16, 0x2D	; 45
    breq    isSetupOrOut        ;2 -> 19 = {13, 21} from SE0 end
     eb4:	89 f1       	breq	.+98     	; 0xf18 <isSetupOrOut>
    cpi     x1, USBPID_OUT      ;1
     eb6:	01 3e       	cpi	r16, 0xE1	; 225
    breq    isSetupOrOut        ;2 -> 22 = {16, 24} from SE0 end / {,24} into next frame
     eb8:	79 f1       	breq	.+94     	; 0xf18 <isSetupOrOut>
    cpi     x1, USBPID_IN       ;1
     eba:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;1
     ebc:	c1 f0       	breq	.+48     	; 0xeee <handleIn>
#define USB_DATA_MASK   ~(USBPID_DATA0 ^ USBPID_DATA1)
    andi    x1, USB_DATA_MASK   ;1
     ebe:	07 77       	andi	r16, 0x77	; 119
    cpi     x1, USBPID_DATA0 & USB_DATA_MASK ;1
     ec0:	03 34       	cpi	r16, 0x43	; 67
    brne    rxDoReturn          ;1 not a data PID -- ignore
     ec2:	31 f5       	brne	.+76     	; 0xf10 <rxDoReturn>

00000ec4 <isData>:
isData:
    lds     x2, usbCurrentTok   ;2
     ec4:	10 91 92 01 	lds	r17, 0x0192
    tst     x2                  ;1
     ec8:	11 23       	and	r17, r17
    breq    rxDoReturn          ;1 for other device or spontaneous data -- ignore
     eca:	11 f1       	breq	.+68     	; 0xf10 <rxDoReturn>
    lds     x1, usbRxLen        ;2
     ecc:	00 91 8f 01 	lds	r16, 0x018F
    cpi     x1, 0               ;1
     ed0:	00 30       	cpi	r16, 0x00	; 0
    brne    sendNakAndReti      ;1 no buffer space available / {30, 38} from SE0 end
     ed2:	d1 f5       	brne	.+116    	; 0xf48 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;1 zero sized data packets are status phase only -- ignore and ack
     ed4:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;1 keep rx buffer clean -- we must not NAK next SETUP
     ed6:	da f1       	brmi	.+118    	; 0xf4e <sendAckAndReti>
    sts     usbRxLen, cnt       ;2 store received data, swap buffers
     ed8:	30 93 8f 01 	sts	0x018F, r19
    sts     usbRxToken, x2      ;2
     edc:	10 93 8c 01 	sts	0x018C, r17
    lds     x1, usbAppBuf       ;2
     ee0:	00 91 7e 01 	lds	r16, 0x017E
    sts     usbAppBuf, YL       ;2
     ee4:	c0 93 7e 01 	sts	0x017E, r28
    sts     usbInputBuf, x1     ;2 buffers now swapped
     ee8:	00 93 8a 01 	sts	0x018A, r16
    rjmp    sendAckAndReti      ;2 -> {43, 51} from SE0 end
     eec:	30 c0       	rjmp	.+96     	; 0xf4e <sendAckAndReti>

00000eee <handleIn>:

handleIn:                       ; {18, 26} from SE0 end
    cp      x2, shift           ;1 shift contains our device addr
     eee:	12 17       	cp	r17, r18
    brne    rxDoReturn          ;1 other device
     ef0:	79 f4       	brne	.+30     	; 0xf10 <rxDoReturn>
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    sbrc    x3, 7               ;2 x3 contains addr + endpoint
     ef2:	47 fd       	sbrc	r20, 7
    rjmp    handleIn1           ;0
     ef4:	3a c0       	rjmp	.+116    	; 0xf6a <handleIn1>
#endif
    lds     cnt, usbTxLen       ;2
     ef6:	30 91 2d 01 	lds	r19, 0x012D
    cpi     cnt, -1             ;1
     efa:	3f 3f       	cpi	r19, 0xFF	; 255
    breq    sendNakAndReti      ;1 -> {27, 35} from SE0 end
     efc:	29 f1       	breq	.+74     	; 0xf48 <sendNakAndReti>
    ldi     x1, -1              ;1
     efe:	0f ef       	ldi	r16, 0xFF	; 255
    sts     usbTxLen, x1        ;2 buffer is now free
     f00:	00 93 2d 01 	sts	0x012D, r16
    ldi     YL, lo8(usbTxBuf)   ;1
     f04:	c0 e7       	ldi	r28, 0x70	; 112
    ldi     YH, hi8(usbTxBuf)   ;1
     f06:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;2 -> {34, 43} from SE0 end
     f08:	25 c0       	rjmp	.+74     	; 0xf54 <usbSendAndReti>

00000f0a <otherOutOrSetup>:
; assuming that no error occurs and the host sends an ACK. We save one byte
; RAM this way and avoid potential problems with endless retries. The rest of
; the driver assumes error-free transfers anyway.

otherOutOrSetup:
    clr     x1
     f0a:	00 27       	eor	r16, r16
    sts     usbCurrentTok, x1
     f0c:	00 93 92 01 	sts	0x0192, r16

00000f10 <rxDoReturn>:
rxDoReturn:
    pop     x3                  ;2
     f10:	4f 91       	pop	r20
    pop     YL                  ;2
     f12:	cf 91       	pop	r28
    pop     YH                  ;2
     f14:	df 91       	pop	r29
    rjmp    sofError            ;2
     f16:	0f c0       	rjmp	.+30     	; 0xf36 <sofError>

00000f18 <isSetupOrOut>:

isSetupOrOut:                   ; we must be fast here -- a data package may follow / {,24} into next frame
    cp      x2, shift           ;1 shift contains our device addr
     f18:	12 17       	cp	r17, r18
    brne    otherOutOrSetup     ;1 other device -- ignore
     f1a:	b9 f7       	brne	.-18     	; 0xf0a <otherOutOrSetup>
    sts     usbCurrentTok, x1   ;2
     f1c:	00 93 92 01 	sts	0x0192, r16
;A transmission can still have data in the output buffer while we receive a
;SETUP package with an IN phase. To avoid that the old data is sent as a reply,
;we abort transmission. ### This mechanism assumes that NO OUT OR SETUP package
;is ever sent to endpoint 1. We would abort transmission for endpoint 0
;in this case.
    ldi     x1, -1              ;1
     f20:	0f ef       	ldi	r16, 0xFF	; 255
    sts     usbMsgLen, x1       ;2
     f22:	00 93 2c 01 	sts	0x012C, r16
    sts     usbTxLen, x1        ;2 abort transmission
     f26:	00 93 2d 01 	sts	0x012D, r16
    pop     x3                  ;2
     f2a:	4f 91       	pop	r20
    pop     YL                  ;2
     f2c:	cf 91       	pop	r28
    in      x1, USB_INTR_PENDING;1
     f2e:	0c b3       	in	r16, 0x1c	; 28
    sbrc    x1, USB_INTR_PENDING_BIT;1 check whether data is already arriving {,41} into next frame
     f30:	00 fd       	sbrc	r16, 0
    rjmp    shortcutToStart     ;2 save the pops and pushes -- a new interrupt is aready pending
     f32:	35 cf       	rjmp	.-406    	; 0xd9e <shortcutToStart>
;If the jump above was not taken, we can be at {,2} into the next frame here
    pop     YH                  ;2
     f34:	df 91       	pop	r29

00000f36 <sofError>:
txDoReturn:
sofError:                       ; error in start of frame -- ignore frame
    ldi     x1, 1<<USB_INTR_PENDING_BIT;1 many int0 events occurred during our processing -- clear pending flag
     f36:	01 e0       	ldi	r16, 0x01	; 1
    out     USB_INTR_PENDING, x1;1
     f38:	0c bb       	out	0x1c, r16	; 28
    pop     shift               ;2
     f3a:	2f 91       	pop	r18
    pop     cnt                 ;2
     f3c:	3f 91       	pop	r19
    pop     x2                  ;2
     f3e:	1f 91       	pop	r17
    pop     x1                  ;2
     f40:	0f 91       	pop	r16
    out     SREG, x1            ;1
     f42:	0f bf       	out	0x3f, r16	; 63
    pop     x1                  ;2
     f44:	0f 91       	pop	r16
    reti                        ;4 -> {,21} into next frame -> up to 3 sync bits missed
     f46:	18 95       	reti

00000f48 <sendNakAndReti>:


sendNakAndReti:                 ; 21 cycles until SOP
    ldi     YL, lo8(usbNakBuf)  ;1
     f48:	c0 e3       	ldi	r28, 0x30	; 48
    ldi     YH, hi8(usbNakBuf)  ;1
     f4a:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendToken        ;2
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <usbSendToken>

00000f4e <sendAckAndReti>:

sendAckAndReti:                 ; 19 cycles until SOP
    ldi     YL, lo8(usbAckBuf)  ;1
     f4e:	cf e2       	ldi	r28, 0x2F	; 47
    ldi     YH, hi8(usbAckBuf)  ;1
     f50:	d1 e0       	ldi	r29, 0x01	; 1

00000f52 <usbSendToken>:
usbSendToken:
    ldi     cnt, 2              ;1
     f52:	32 e0       	ldi	r19, 0x02	; 2

00000f54 <usbSendAndReti>:
;usbSend:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x4, shift, cnt, Y
usbSendAndReti:             ; SOP starts 16 cycles after call
    push    x4              ;2
     f54:	5f 93       	push	r21
    in      x1, USBOUT      ;1
     f56:	0b b1       	in	r16, 0x0b	; 11
    cbr     x1, USBMASK     ;1 mask out data bits
     f58:	0a 7f       	andi	r16, 0xFA	; 250
    ori     x1, USBIDLE     ;1 idle
     f5a:	01 60       	ori	r16, 0x01	; 1
    out     USBOUT, x1      ;1 prepare idle state
     f5c:	0b b9       	out	0x0b, r16	; 11
    ldi     x4, USBMASK     ;1 exor mask
     f5e:	55 e0       	ldi	r21, 0x05	; 5
    in      x2, USBDDR      ;1
     f60:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK     ;1 set both pins to output
     f62:	15 60       	ori	r17, 0x05	; 5
    out     USBDDR, x2      ;1 <-- acquire bus now
     f64:	1a b9       	out	0x0a, r17	; 10
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     shift, 0x80     ;1 sync byte is first byte sent
     f66:	20 e8       	ldi	r18, 0x80	; 128
    rjmp    txLoop          ;2 -> 13 + 3 = 16 cycles until SOP
     f68:	19 c0       	rjmp	.+50     	; 0xf9c <txLoop>

00000f6a <handleIn1>:

#if USB_CFG_HAVE_INTRIN_ENDPOINT    /* placed here due to relative jump range */
handleIn1:
    lds     cnt, usbTxLen1
     f6a:	30 91 2e 01 	lds	r19, 0x012E
    cpi     cnt, -1
     f6e:	3f 3f       	cpi	r19, 0xFF	; 255
    breq    sendNakAndReti
     f70:	59 f3       	breq	.-42     	; 0xf48 <sendNakAndReti>
    ldi     x1, -1
     f72:	0f ef       	ldi	r16, 0xFF	; 255
    sts     usbTxLen1, x1
     f74:	00 93 2e 01 	sts	0x012E, r16
    ldi     YL, lo8(usbTxBuf1)
     f78:	cf e7       	ldi	r28, 0x7F	; 127
    ldi     YH, hi8(usbTxBuf1)
     f7a:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti
     f7c:	eb cf       	rjmp	.-42     	; 0xf54 <usbSendAndReti>

00000f7e <bitstuff0>:
#endif

bitstuff0:                  ;1 (for branch taken)
    eor     x1, x4          ;1
     f7e:	05 27       	eor	r16, r21
    ldi     x2, 0           ;1
     f80:	10 e0       	ldi	r17, 0x00	; 0
    out     USBOUT, x1      ;1 <-- out
     f82:	0b b9       	out	0x0b, r16	; 11
    rjmp    didStuff0       ;2 branch back 2 cycles earlier
     f84:	10 c0       	rjmp	.+32     	; 0xfa6 <didStuff0>

00000f86 <bitstuff1>:
bitstuff1:                  ;1 (for branch taken)
    eor     x1, x4          ;1
     f86:	05 27       	eor	r16, r21
    ldi     x2, 0           ;1
     f88:	10 e0       	ldi	r17, 0x00	; 0
    sec                     ;1 set carry so that brsh will not jump
     f8a:	08 94       	sec
    out     USBOUT, x1      ;1 <-- out
     f8c:	0b b9       	out	0x0b, r16	; 11
    rjmp    didStuff1       ;2 jump back 1 cycle earler
     f8e:	13 c0       	rjmp	.+38     	; 0xfb6 <didStuff1>

00000f90 <bitstuff2>:
bitstuff2:                  ;1 (for branch taken)
    eor     x1, x4          ;1
     f90:	05 27       	eor	r16, r21
    ldi     x2, 0           ;1
     f92:	10 e0       	ldi	r17, 0x00	; 0
    rjmp    didStuff2       ;2 jump back 3 cycles earlier and do out
     f94:	15 c0       	rjmp	.+42     	; 0xfc0 <didStuff2>

00000f96 <bitstuff3>:
bitstuff3:                  ;1 (for branch taken)
    eor     x1, x4          ;1
     f96:	05 27       	eor	r16, r21
    ldi     x2, 0           ;1
     f98:	10 e0       	ldi	r17, 0x00	; 0
    rjmp    didStuff3       ;2 jump back earlier
     f9a:	19 c0       	rjmp	.+50     	; 0xfce <didStuff3>

00000f9c <txLoop>:

txLoop:
    sbrs    shift, 0        ;1
     f9c:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1
     f9e:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;1 <-- out
     fa0:	0b b9       	out	0x0b, r16	; 11
    ror     shift           ;1
     fa2:	27 95       	ror	r18
    ror     x2              ;1
     fa4:	17 95       	ror	r17

00000fa6 <didStuff0>:
didStuff0:
    cpi     x2, 0xfc        ;1
     fa6:	1c 3f       	cpi	r17, 0xFC	; 252
    brsh    bitstuff0       ;1
     fa8:	50 f7       	brcc	.-44     	; 0xf7e <bitstuff0>
    sbrs    shift, 0        ;1
     faa:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1
     fac:	05 27       	eor	r16, r21
    ror     shift           ;1
     fae:	27 95       	ror	r18
    out     USBOUT, x1      ;1 <-- out
     fb0:	0b b9       	out	0x0b, r16	; 11
    ror     x2              ;1
     fb2:	17 95       	ror	r17
    cpi     x2, 0xfc        ;1
     fb4:	1c 3f       	cpi	r17, 0xFC	; 252

00000fb6 <didStuff1>:
didStuff1:
    brsh    bitstuff1       ;1
     fb6:	38 f7       	brcc	.-50     	; 0xf86 <bitstuff1>
    sbrs    shift, 0        ;1
     fb8:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1
     fba:	05 27       	eor	r16, r21
    ror     shift           ;1
     fbc:	27 95       	ror	r18
    ror     x2              ;1
     fbe:	17 95       	ror	r17

00000fc0 <didStuff2>:
didStuff2:
    out     USBOUT, x1      ;1 <-- out
     fc0:	0b b9       	out	0x0b, r16	; 11
    cpi     x2, 0xfc        ;1
     fc2:	1c 3f       	cpi	r17, 0xFC	; 252
    brsh    bitstuff2       ;1
     fc4:	28 f7       	brcc	.-54     	; 0xf90 <bitstuff2>
    sbrs    shift, 0        ;1
     fc6:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1
     fc8:	05 27       	eor	r16, r21
    ror     shift           ;1
     fca:	27 95       	ror	r18
    ror     x2              ;1
     fcc:	17 95       	ror	r17

00000fce <didStuff3>:
didStuff3:
    cpi     x2, 0xfc        ;1
     fce:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      ;1 <-- out
     fd0:	0b b9       	out	0x0b, r16	; 11
    brsh    bitstuff3       ;1
     fd2:	08 f7       	brcc	.-62     	; 0xf96 <bitstuff3>
    nop2                    ;2
     fd4:	00 c0       	rjmp	.+0      	; 0xfd6 <didStuff3+0x8>
    ld      x3, y+          ;2
     fd6:	49 91       	ld	r20, Y+
    sbrs    shift, 0        ;1
     fd8:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1
     fda:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;1 <-- out
     fdc:	0b b9       	out	0x0b, r16	; 11
    ror     shift           ;1
     fde:	27 95       	ror	r18
    ror     x2              ;1
     fe0:	17 95       	ror	r17

00000fe2 <didStuff4>:
didStuff4:
    cpi     x2, 0xfc        ;1
     fe2:	1c 3f       	cpi	r17, 0xFC	; 252
    brsh    bitstuff4       ;1
     fe4:	80 f5       	brcc	.+96     	; 0x1046 <bitstuff4>
    sbrs    shift, 0        ;1
     fe6:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1
     fe8:	05 27       	eor	r16, r21
    ror     shift           ;1
     fea:	27 95       	ror	r18
    out     USBOUT, x1      ;1 <-- out
     fec:	0b b9       	out	0x0b, r16	; 11
    ror     x2              ;1
     fee:	17 95       	ror	r17
    cpi     x2, 0xfc        ;1
     ff0:	1c 3f       	cpi	r17, 0xFC	; 252

00000ff2 <didStuff5>:
didStuff5:
    brsh    bitstuff5       ;1
     ff2:	68 f5       	brcc	.+90     	; 0x104e <bitstuff5>
    sbrs    shift, 0        ;1
     ff4:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1
     ff6:	05 27       	eor	r16, r21
    ror     shift           ;1
     ff8:	27 95       	ror	r18
    ror     x2              ;1
     ffa:	17 95       	ror	r17

00000ffc <didStuff6>:
didStuff6:
    out     USBOUT, x1      ;1 <-- out
     ffc:	0b b9       	out	0x0b, r16	; 11
    cpi     x2, 0xfc        ;1
     ffe:	1c 3f       	cpi	r17, 0xFC	; 252
    brsh    bitstuff6       ;1
    1000:	58 f5       	brcc	.+86     	; 0x1058 <bitstuff6>
    sbrs    shift, 0        ;1
    1002:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;1
    1004:	05 27       	eor	r16, r21
    ror     shift           ;1
    1006:	27 95       	ror	r18
    ror     x2              ;1
    1008:	17 95       	ror	r17

0000100a <didStuff7>:
didStuff7:
    cpi     x2, 0xfc        ;1
    100a:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      ;1 <-- out
    100c:	0b b9       	out	0x0b, r16	; 11
    brsh    bitstuff7       ;1
    100e:	38 f5       	brcc	.+78     	; 0x105e <bitstuff7>
    mov     shift, x3       ;1
    1010:	24 2f       	mov	r18, r20
    dec     cnt             ;1
    1012:	3a 95       	dec	r19
    brne    txLoop          ;2 | 1
    1014:	19 f6       	brne	.-122    	; 0xf9c <txLoop>
    cbr     x1, USBMASK     ;1 prepare SE0 [spec says EOP may be 15 to 18 cycles]
    1016:	0a 7f       	andi	r16, 0xFA	; 250
    pop     x4              ;2
    1018:	5f 91       	pop	r21
    out     USBOUT, x1      ;1 <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
    101a:	0b b9       	out	0x0b, r16	; 11
    ldi     cnt, 2          ;| takes cnt * 3 cycles
    101c:	32 e0       	ldi	r19, 0x02	; 2

0000101e <se0Delay>:
se0Delay:                   ;|
    dec     cnt             ;|
    101e:	3a 95       	dec	r19
    brne    se0Delay        ;| -> 2 * 3 = 6 cycles
    1020:	f1 f7       	brne	.-4      	; 0x101e <se0Delay>
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
    lds     x2, usbNewDeviceAddr    ;2
    1022:	10 91 90 01 	lds	r17, 0x0190
    subi    YL, lo8(usbNakBuf + 2)  ;1
    1026:	c2 53       	subi	r28, 0x32	; 50
    sbci    YH, hi8(usbNakBuf + 2)  ;1
    1028:	d1 40       	sbci	r29, 0x01	; 1
    breq    skipAddrAssign          ;2
    102a:	11 f0       	breq	.+4      	; 0x1030 <skipAddrAssign>
    sts     usbDeviceAddr, x2       ;0  if not skipped: SE0 is one cycle longer
    102c:	10 93 8b 01 	sts	0x018B, r17

00001030 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ori     x1, USBIDLE     ;1
    1030:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR      ;1
    1032:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK     ;1 set both pins to input
    1034:	1a 7f       	andi	r17, 0xFA	; 250
    out     USBOUT, x1      ;1 <-- out J (idle) -- end of SE0 (EOP signal)
    1036:	0b b9       	out	0x0b, r16	; 11
    cbr     x1, USBMASK     ;1 configure no pullup on both pins
    1038:	0a 7f       	andi	r16, 0xFA	; 250
    pop     x3              ;2
    103a:	4f 91       	pop	r20
    pop     YL              ;2
    103c:	cf 91       	pop	r28
    out     USBDDR, x2      ;1 <-- release bus now
    103e:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x1      ;1 set pullup state
    1040:	0b b9       	out	0x0b, r16	; 11
    pop     YH              ;2
    1042:	df 91       	pop	r29
    rjmp    txDoReturn      ;2 [we want to jump to rxDoReturn, but this saves cycles]
    1044:	78 cf       	rjmp	.-272    	; 0xf36 <sofError>

00001046 <bitstuff4>:


bitstuff4:                  ;1 (for branch taken)
    eor     x1, x4          ;1
    1046:	05 27       	eor	r16, r21
    ldi     x2, 0           ;1
    1048:	10 e0       	ldi	r17, 0x00	; 0
    out     USBOUT, x1      ;1 <-- out
    104a:	0b b9       	out	0x0b, r16	; 11
    rjmp    didStuff4       ;2 jump back 2 cycles earlier
    104c:	ca cf       	rjmp	.-108    	; 0xfe2 <didStuff4>

0000104e <bitstuff5>:
bitstuff5:                  ;1 (for branch taken)
    eor     x1, x4          ;1
    104e:	05 27       	eor	r16, r21
    ldi     x2, 0           ;1
    1050:	10 e0       	ldi	r17, 0x00	; 0
    sec                     ;1 set carry so that brsh is not taken
    1052:	08 94       	sec
    out     USBOUT, x1      ;1 <-- out
    1054:	0b b9       	out	0x0b, r16	; 11
    rjmp    didStuff5       ;2 jump back 1 cycle earlier
    1056:	cd cf       	rjmp	.-102    	; 0xff2 <didStuff5>

00001058 <bitstuff6>:
bitstuff6:                  ;1 (for branch taken)
    eor     x1, x4          ;1
    1058:	05 27       	eor	r16, r21
    ldi     x2, 0           ;1
    105a:	10 e0       	ldi	r17, 0x00	; 0
    rjmp    didStuff6       ;2 jump back 3 cycles earlier and do out there
    105c:	cf cf       	rjmp	.-98     	; 0xffc <didStuff6>

0000105e <bitstuff7>:
bitstuff7:                  ;1 (for branch taken)
    eor     x1, x4          ;1
    105e:	05 27       	eor	r16, r21
    ldi     x2, 0           ;1
    1060:	10 e0       	ldi	r17, 0x00	; 0
    rjmp    didStuff7       ;2 jump back 4 cycles earlier
    1062:	d3 cf       	rjmp	.-90     	; 0x100a <didStuff7>

00001064 <usbCrc16>:
;   r20/21: polynomial
;   r23: scratch
;   r24/25: crc-sum
;   r26/27=X: ptr
usbCrc16:
    mov     ptrL, argPtrL
    1064:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
    1066:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0xff
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    ldi     resCrcH, 0xff
    106a:	9f ef       	ldi	r25, 0xFF	; 255
    ldi     polyL, lo8(0xa001)
    106c:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
    106e:	50 ea       	ldi	r21, 0xA0	; 160

00001070 <crcByteLoop>:
crcByteLoop:
    subi    argLen, 1
    1070:	61 50       	subi	r22, 0x01	; 1
    brcs    crcReady
    1072:	70 f0       	brcs	.+28     	; 0x1090 <crcReady>
    ld      byte, ptr+
    1074:	2d 91       	ld	r18, X+
    ldi     bitCnt, 8
    1076:	38 e0       	ldi	r19, 0x08	; 8

00001078 <crcBitLoop>:
crcBitLoop:
    mov     scratch, byte
    1078:	72 2f       	mov	r23, r18
    eor     scratch, resCrcL
    107a:	78 27       	eor	r23, r24
    lsr     resCrcH
    107c:	96 95       	lsr	r25
    ror     resCrcL
    107e:	87 95       	ror	r24
    lsr     byte
    1080:	26 95       	lsr	r18
    sbrs    scratch, 0
    1082:	70 ff       	sbrs	r23, 0
    rjmp    crcNoXor
    1084:	02 c0       	rjmp	.+4      	; 0x108a <crcNoXor>
    eor     resCrcL, polyL
    1086:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
    1088:	95 27       	eor	r25, r21

0000108a <crcNoXor>:
crcNoXor:
    dec     bitCnt
    108a:	3a 95       	dec	r19
    brne    crcBitLoop
    108c:	a9 f7       	brne	.-22     	; 0x1078 <crcBitLoop>
    rjmp    crcByteLoop
    108e:	f0 cf       	rjmp	.-32     	; 0x1070 <crcByteLoop>

00001090 <crcReady>:
crcReady:
    com     resCrcL
    1090:	80 95       	com	r24
    com     resCrcH
    1092:	90 95       	com	r25
    ret
    1094:	08 95       	ret

00001096 <usbCrc16Append>:

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
    1096:	e6 df       	rcall	.-52     	; 0x1064 <usbCrc16>
    st      ptr+, resCrcL
    1098:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
    109a:	9d 93       	st	X+, r25
    ret
    109c:	08 95       	ret

0000109e <memcmp>:
    109e:	fb 01       	movw	r30, r22
    10a0:	dc 01       	movw	r26, r24
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <memcmp+0xe>
    10a4:	8d 91       	ld	r24, X+
    10a6:	01 90       	ld	r0, Z+
    10a8:	80 19       	sub	r24, r0
    10aa:	21 f4       	brne	.+8      	; 0x10b4 <memcmp+0x16>
    10ac:	41 50       	subi	r20, 0x01	; 1
    10ae:	50 40       	sbci	r21, 0x00	; 0
    10b0:	c8 f7       	brcc	.-14     	; 0x10a4 <memcmp+0x6>
    10b2:	88 1b       	sub	r24, r24
    10b4:	99 0b       	sbc	r25, r25
    10b6:	08 95       	ret

000010b8 <_exit>:
    10b8:	f8 94       	cli

000010ba <__stop_program>:
    10ba:	ff cf       	rjmp	.-2      	; 0x10ba <__stop_program>
